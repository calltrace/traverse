name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  # Also run before releases
  release:
    types: [created]
  # Allow manual trigger
  workflow_dispatch:
  # Allow this workflow to be called by other workflows
  workflow_call:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-target-stable-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --workspace --all-features --verbose

    - name: Run doctests
      run: cargo test --doc --workspace

    - name: Check formatting
      if: matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --workspace --all-features -- -D warnings

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-integration-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binaries
      run: cargo build --release --workspace

    - name: Test sol2cg on example project
      run: |
        # Test basic DOT generation
        ./target/release/sol2cg test/SimpleContract.sol --format dot -o /tmp/test.dot
        test -f /tmp/test.dot || exit 1
        
        # Test Mermaid generation
        ./target/release/sol2cg test/SimpleContract.sol --format mermaid -o /tmp/test.mmd
        test -f /tmp/test.mmd || exit 1
        
        # Test JSON generation
        ./target/release/sol2cg test/SimpleContract.sol --format json -o /tmp/test.json
        test -f /tmp/test.json || exit 1

    - name: Verify chunking functionality
      run: |
        # Test chunking with a contract that has multiple functions
        ./target/release/sol2cg test/SimpleContract.sol --format mermaid --chunk-dir /tmp/verify-chunks
        
        # Verify output was created (chunks may or may not be created depending on size)
        ls -la /tmp/verify-chunks/ || true

  check-examples:
    name: Verify Examples
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Check test contracts
      run: |
        test -f test/SimpleContract.sol
        echo "✅ Test contract exists"

  # Gate for releases - all tests must pass
  release-gate:
    name: Release Gate
    runs-on: ubuntu-latest
    needs: [test, integration-test, check-examples]
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    
    steps:
    - name: All tests passed
      run: |
        echo "✅ All tests passed successfully!"
        echo "Release can proceed."

    - name: Check version consistency
      uses: actions/checkout@v4
    - run: |
        # Verify all Cargo.toml files have the same version
        VERSION=$(grep '^version' crates/cli/Cargo.toml | head -1 | cut -d '"' -f 2)
        echo "Expected version: $VERSION"
        
        for cargo_file in crates/*/Cargo.toml; do
          FILE_VERSION=$(grep '^version' "$cargo_file" | head -1 | cut -d '"' -f 2)
          if [ "$FILE_VERSION" != "$VERSION" ]; then
            echo "❌ Version mismatch in $cargo_file: $FILE_VERSION != $VERSION"
            exit 1
          fi
        done
        
        echo "✅ All crates have consistent version: $VERSION"