└── source_file [0,0]-[94,0] 'pragma solidity =0.5.16;\n\nimport './i...'
    ├── pragma_directive [0,0]-[0,24] 'pragma solidity =0.5.16;'
    │   ├── (anon) pragma [0,0]-[0,6] 'pragma'
    │   ├── solidity_pragma_token [0,7]-[0,23] 'solidity =0.5.16'
    │   │   ├── (anon) solidity [0,7]-[0,15] 'solidity'
    │   │   ├── solidity_version_comparison_operator [0,15]-[0,17] ' ='
    │   │   │   └── (anon) = [0,15]-[0,17] ' ='
    │   │   └── solidity_version [0,17]-[0,23] '0.5.16'
    │   └── (anon) ; [0,23]-[0,24] ';'
    ├── import_directive [2,0]-[2,42] 'import './interfaces/IUniswapV2ERC20....'
    │   ├── (anon) import [2,0]-[2,6] 'import'
    │   ├── string [2,7]-[2,41] ''./interfaces/IUniswapV2ERC20.sol''
    │   │   ├── (anon) ' [2,7]-[2,8] '''
    │   │   └── (anon) ' [2,40]-[2,41] '''
    │   └── (anon) ; [2,41]-[2,42] ';'
    ├── import_directive [3,0]-[3,34] 'import './libraries/SafeMath.sol';'
    │   ├── (anon) import [3,0]-[3,6] 'import'
    │   ├── string [3,7]-[3,33] ''./libraries/SafeMath.sol''
    │   │   ├── (anon) ' [3,7]-[3,8] '''
    │   │   └── (anon) ' [3,32]-[3,33] '''
    │   └── (anon) ; [3,33]-[3,34] ';'
    └── contract_declaration [5,0]-[93,1] 'contract UniswapV2ERC20 is IUniswapV2...'
        ├── (anon) contract [5,0]-[5,8] 'contract'
        ├── identifier [5,9]-[5,23] 'UniswapV2ERC20'
        ├── (anon) is [5,24]-[5,26] 'is'
        ├── inheritance_specifier [5,27]-[5,42] 'IUniswapV2ERC20'
        │   └── user_defined_type [5,27]-[5,42] 'IUniswapV2ERC20'
        │       └── identifier [5,27]-[5,42] 'IUniswapV2ERC20'
        └── contract_body [5,43]-[93,1] '{\n    using SafeMath for uint;\n\n    s...'
            ├── (anon) { [5,43]-[5,44] '{'
            ├── using_directive [6,4]-[6,28] 'using SafeMath for uint;'
            │   ├── (anon) using [6,4]-[6,9] 'using'
            │   ├── type_alias [6,10]-[6,18] 'SafeMath'
            │   │   └── identifier [6,10]-[6,18] 'SafeMath'
            │   ├── (anon) for [6,19]-[6,22] 'for'
            │   ├── type_name [6,23]-[6,27] 'uint'
            │   │   └── primitive_type [6,23]-[6,27] 'uint'
            │   │       └── (anon) uint [6,23]-[6,27] 'uint'
            │   └── (anon) ; [6,27]-[6,28] ';'
            ├── state_variable_declaration [8,4]-[8,47] 'string public constant name = 'Uniswa...'
            │   ├── type_name [8,4]-[8,10] 'string'
            │   │   └── primitive_type [8,4]-[8,10] 'string'
            │   │       └── (anon) string [8,4]-[8,10] 'string'
            │   ├── visibility [8,11]-[8,17] 'public'
            │   │   └── (anon) public [8,11]-[8,17] 'public'
            │   ├── (anon) constant [8,18]-[8,26] 'constant'
            │   ├── identifier [8,27]-[8,31] 'name'
            │   ├── (anon) = [8,32]-[8,33] '='
            │   ├── expression [8,34]-[8,46] ''Uniswap V2''
            │   │   └── string_literal [8,34]-[8,46] ''Uniswap V2''
            │   │       └── string [8,34]-[8,46] ''Uniswap V2''
            │   │           ├── (anon) ' [8,34]-[8,35] '''
            │   │           └── (anon) ' [8,45]-[8,46] '''
            │   └── (anon) ; [8,46]-[8,47] ';'
            ├── state_variable_declaration [9,4]-[9,45] 'string public constant symbol = 'UNI-...'
            │   ├── type_name [9,4]-[9,10] 'string'
            │   │   └── primitive_type [9,4]-[9,10] 'string'
            │   │       └── (anon) string [9,4]-[9,10] 'string'
            │   ├── visibility [9,11]-[9,17] 'public'
            │   │   └── (anon) public [9,11]-[9,17] 'public'
            │   ├── (anon) constant [9,18]-[9,26] 'constant'
            │   ├── identifier [9,27]-[9,33] 'symbol'
            │   ├── (anon) = [9,34]-[9,35] '='
            │   ├── expression [9,36]-[9,44] ''UNI-V2''
            │   │   └── string_literal [9,36]-[9,44] ''UNI-V2''
            │   │       └── string [9,36]-[9,44] ''UNI-V2''
            │   │           ├── (anon) ' [9,36]-[9,37] '''
            │   │           └── (anon) ' [9,43]-[9,44] '''
            │   └── (anon) ; [9,44]-[9,45] ';'
            ├── state_variable_declaration [10,4]-[10,40] 'uint8 public constant decimals = 18;'
            │   ├── type_name [10,4]-[10,9] 'uint8'
            │   │   └── primitive_type [10,4]-[10,9] 'uint8'
            │   │       └── (anon) uint8 [10,4]-[10,9] 'uint8'
            │   ├── visibility [10,10]-[10,16] 'public'
            │   │   └── (anon) public [10,10]-[10,16] 'public'
            │   ├── (anon) constant [10,17]-[10,25] 'constant'
            │   ├── identifier [10,26]-[10,34] 'decimals'
            │   ├── (anon) = [10,35]-[10,36] '='
            │   ├── expression [10,37]-[10,39] '18'
            │   │   └── number_literal [10,37]-[10,39] '18'
            │   └── (anon) ; [10,39]-[10,40] ';'
            ├── state_variable_declaration [11,4]-[11,29] 'uint  public totalSupply;'
            │   ├── type_name [11,4]-[11,8] 'uint'
            │   │   └── primitive_type [11,4]-[11,8] 'uint'
            │   │       └── (anon) uint [11,4]-[11,8] 'uint'
            │   ├── visibility [11,10]-[11,16] 'public'
            │   │   └── (anon) public [11,10]-[11,16] 'public'
            │   ├── identifier [11,17]-[11,28] 'totalSupply'
            │   └── (anon) ; [11,28]-[11,29] ';'
            ├── state_variable_declaration [12,4]-[12,46] 'mapping(address => uint) public balan...'
            │   ├── type_name [12,4]-[12,28] 'mapping(address => uint)'
            │   │   ├── (anon) mapping [12,4]-[12,11] 'mapping'
            │   │   ├── (anon) ( [12,11]-[12,12] '('
            │   │   ├── primitive_type [12,12]-[12,19] 'address'
            │   │   │   └── (anon) address [12,12]-[12,19] 'address'
            │   │   ├── (anon) => [12,20]-[12,22] '=>'
            │   │   ├── type_name [12,23]-[12,27] 'uint'
            │   │   │   └── primitive_type [12,23]-[12,27] 'uint'
            │   │   │       └── (anon) uint [12,23]-[12,27] 'uint'
            │   │   └── (anon) ) [12,27]-[12,28] ')'
            │   ├── visibility [12,29]-[12,35] 'public'
            │   │   └── (anon) public [12,29]-[12,35] 'public'
            │   ├── identifier [12,36]-[12,45] 'balanceOf'
            │   └── (anon) ; [12,45]-[12,46] ';'
            ├── state_variable_declaration [13,4]-[13,66] 'mapping(address => mapping(address =>...'
            │   ├── type_name [13,4]-[13,48] 'mapping(address => mapping(address =>...'
            │   │   ├── (anon) mapping [13,4]-[13,11] 'mapping'
            │   │   ├── (anon) ( [13,11]-[13,12] '('
            │   │   ├── primitive_type [13,12]-[13,19] 'address'
            │   │   │   └── (anon) address [13,12]-[13,19] 'address'
            │   │   ├── (anon) => [13,20]-[13,22] '=>'
            │   │   ├── type_name [13,23]-[13,47] 'mapping(address => uint)'
            │   │   │   ├── (anon) mapping [13,23]-[13,30] 'mapping'
            │   │   │   ├── (anon) ( [13,30]-[13,31] '('
            │   │   │   ├── primitive_type [13,31]-[13,38] 'address'
            │   │   │   │   └── (anon) address [13,31]-[13,38] 'address'
            │   │   │   ├── (anon) => [13,39]-[13,41] '=>'
            │   │   │   ├── type_name [13,42]-[13,46] 'uint'
            │   │   │   │   └── primitive_type [13,42]-[13,46] 'uint'
            │   │   │   │       └── (anon) uint [13,42]-[13,46] 'uint'
            │   │   │   └── (anon) ) [13,46]-[13,47] ')'
            │   │   └── (anon) ) [13,47]-[13,48] ')'
            │   ├── visibility [13,49]-[13,55] 'public'
            │   │   └── (anon) public [13,49]-[13,55] 'public'
            │   ├── identifier [13,56]-[13,65] 'allowance'
            │   └── (anon) ; [13,65]-[13,66] ';'
            ├── state_variable_declaration [15,4]-[15,36] 'bytes32 public DOMAIN_SEPARATOR;'
            │   ├── type_name [15,4]-[15,11] 'bytes32'
            │   │   └── primitive_type [15,4]-[15,11] 'bytes32'
            │   │       └── (anon) bytes32 [15,4]-[15,11] 'bytes32'
            │   ├── visibility [15,12]-[15,18] 'public'
            │   │   └── (anon) public [15,12]-[15,18] 'public'
            │   ├── identifier [15,19]-[15,35] 'DOMAIN_SEPARATOR'
            │   └── (anon) ; [15,35]-[15,36] ';'
            ├── comment [16,4]-[16,103] '// keccak256("Permit(address owner,ad...'
            ├── state_variable_declaration [17,4]-[17,113] 'bytes32 public constant PERMIT_TYPEHA...'
            │   ├── type_name [17,4]-[17,11] 'bytes32'
            │   │   └── primitive_type [17,4]-[17,11] 'bytes32'
            │   │       └── (anon) bytes32 [17,4]-[17,11] 'bytes32'
            │   ├── visibility [17,12]-[17,18] 'public'
            │   │   └── (anon) public [17,12]-[17,18] 'public'
            │   ├── (anon) constant [17,19]-[17,27] 'constant'
            │   ├── identifier [17,28]-[17,43] 'PERMIT_TYPEHASH'
            │   ├── (anon) = [17,44]-[17,45] '='
            │   ├── expression [17,46]-[17,112] '0x6e71edae12b1b97f4d1f60370fef10105fa...'
            │   │   └── number_literal [17,46]-[17,112] '0x6e71edae12b1b97f4d1f60370fef10105fa...'
            │   └── (anon) ; [17,112]-[17,113] ';'
            ├── state_variable_declaration [18,4]-[18,43] 'mapping(address => uint) public nonces;'
            │   ├── type_name [18,4]-[18,28] 'mapping(address => uint)'
            │   │   ├── (anon) mapping [18,4]-[18,11] 'mapping'
            │   │   ├── (anon) ( [18,11]-[18,12] '('
            │   │   ├── primitive_type [18,12]-[18,19] 'address'
            │   │   │   └── (anon) address [18,12]-[18,19] 'address'
            │   │   ├── (anon) => [18,20]-[18,22] '=>'
            │   │   ├── type_name [18,23]-[18,27] 'uint'
            │   │   │   └── primitive_type [18,23]-[18,27] 'uint'
            │   │   │       └── (anon) uint [18,23]-[18,27] 'uint'
            │   │   └── (anon) ) [18,27]-[18,28] ')'
            │   ├── visibility [18,29]-[18,35] 'public'
            │   │   └── (anon) public [18,29]-[18,35] 'public'
            │   ├── identifier [18,36]-[18,42] 'nonces'
            │   └── (anon) ; [18,42]-[18,43] ';'
            ├── event_definition [20,4]-[20,79] 'event Approval(address indexed owner,...'
            │   ├── (anon) event [20,4]-[20,9] 'event'
            │   ├── identifier [20,10]-[20,18] 'Approval'
            │   ├── (anon) ( [20,18]-[20,19] '('
            │   ├── event_parameter [20,19]-[20,40] 'address indexed owner'
            │   │   ├── type_name [20,19]-[20,26] 'address'
            │   │   │   └── primitive_type [20,19]-[20,26] 'address'
            │   │   │       └── (anon) address [20,19]-[20,26] 'address'
            │   │   ├── (anon) indexed [20,27]-[20,34] 'indexed'
            │   │   └── identifier [20,35]-[20,40] 'owner'
            │   ├── (anon) , [20,40]-[20,41] ','
            │   ├── event_parameter [20,42]-[20,65] 'address indexed spender'
            │   │   ├── type_name [20,42]-[20,49] 'address'
            │   │   │   └── primitive_type [20,42]-[20,49] 'address'
            │   │   │       └── (anon) address [20,42]-[20,49] 'address'
            │   │   ├── (anon) indexed [20,50]-[20,57] 'indexed'
            │   │   └── identifier [20,58]-[20,65] 'spender'
            │   ├── (anon) , [20,65]-[20,66] ','
            │   ├── event_parameter [20,67]-[20,77] 'uint value'
            │   │   ├── type_name [20,67]-[20,71] 'uint'
            │   │   │   └── primitive_type [20,67]-[20,71] 'uint'
            │   │   │       └── (anon) uint [20,67]-[20,71] 'uint'
            │   │   └── identifier [20,72]-[20,77] 'value'
            │   ├── (anon) ) [20,77]-[20,78] ')'
            │   └── (anon) ; [20,78]-[20,79] ';'
            ├── event_definition [21,4]-[21,73] 'event Transfer(address indexed from, ...'
            │   ├── (anon) event [21,4]-[21,9] 'event'
            │   ├── identifier [21,10]-[21,18] 'Transfer'
            │   ├── (anon) ( [21,18]-[21,19] '('
            │   ├── event_parameter [21,19]-[21,39] 'address indexed from'
            │   │   ├── type_name [21,19]-[21,26] 'address'
            │   │   │   └── primitive_type [21,19]-[21,26] 'address'
            │   │   │       └── (anon) address [21,19]-[21,26] 'address'
            │   │   ├── (anon) indexed [21,27]-[21,34] 'indexed'
            │   │   └── identifier [21,35]-[21,39] 'from'
            │   ├── (anon) , [21,39]-[21,40] ','
            │   ├── event_parameter [21,41]-[21,59] 'address indexed to'
            │   │   ├── type_name [21,41]-[21,48] 'address'
            │   │   │   └── primitive_type [21,41]-[21,48] 'address'
            │   │   │       └── (anon) address [21,41]-[21,48] 'address'
            │   │   ├── (anon) indexed [21,49]-[21,56] 'indexed'
            │   │   └── identifier [21,57]-[21,59] 'to'
            │   ├── (anon) , [21,59]-[21,60] ','
            │   ├── event_parameter [21,61]-[21,71] 'uint value'
            │   │   ├── type_name [21,61]-[21,65] 'uint'
            │   │   │   └── primitive_type [21,61]-[21,65] 'uint'
            │   │   │       └── (anon) uint [21,61]-[21,65] 'uint'
            │   │   └── identifier [21,66]-[21,71] 'value'
            │   ├── (anon) ) [21,71]-[21,72] ')'
            │   └── (anon) ; [21,72]-[21,73] ';'
            ├── constructor_definition [23,4]-[37,5] 'constructor() public {\n        uint c...'
            │   ├── (anon) constructor [23,4]-[23,15] 'constructor'
            │   ├── (anon) ( [23,15]-[23,16] '('
            │   ├── (anon) ) [23,16]-[23,17] ')'
            │   ├── (anon) public [23,18]-[23,24] 'public'
            │   └── function_body [23,25]-[37,5] '{\n        uint chainId;\n        assem...'
            │       ├── (anon) { [23,25]-[23,26] '{'
            │       ├── statement [24,8]-[24,21] 'uint chainId;'
            │       │   └── variable_declaration_statement [24,8]-[24,21] 'uint chainId;'
            │       │       ├── variable_declaration [24,8]-[24,20] 'uint chainId'
            │       │       │   ├── type_name [24,8]-[24,12] 'uint'
            │       │       │   │   └── primitive_type [24,8]-[24,12] 'uint'
            │       │       │   │       └── (anon) uint [24,8]-[24,12] 'uint'
            │       │       │   └── identifier [24,13]-[24,20] 'chainId'
            │       │       └── (anon) ; [24,20]-[24,21] ';'
            │       ├── statement [25,8]-[27,9] 'assembly {\n            chainId := cha...'
            │       │   └── assembly_statement [25,8]-[27,9] 'assembly {\n            chainId := cha...'
            │       │       ├── (anon) assembly [25,8]-[25,16] 'assembly'
            │       │       ├── (anon) { [25,17]-[25,18] '{'
            │       │       ├── yul_assignment [26,12]-[26,30] 'chainId := chainid'
            │       │       │   ├── yul_path [26,12]-[26,19] 'chainId'
            │       │       │   │   └── yul_identifier [26,12]-[26,19] 'chainId'
            │       │       │   │       └── identifier [26,12]-[26,19] 'chainId'
            │       │       │   ├── (anon) := [26,20]-[26,22] ':='
            │       │       │   └── yul_function_call [26,23]-[26,30] 'chainid'
            │       │       │       └── yul_evm_builtin [26,23]-[26,30] 'chainid'
            │       │       │           └── (anon) chainid [26,23]-[26,30] 'chainid'
            │       │       └── (anon) } [27,8]-[27,9] '}'
            │       ├── statement [28,8]-[36,10] 'DOMAIN_SEPARATOR = keccak256(\n       ...'
            │       │   └── expression_statement [28,8]-[36,10] 'DOMAIN_SEPARATOR = keccak256(\n       ...'
            │       │       ├── expression [28,8]-[36,9] 'DOMAIN_SEPARATOR = keccak256(\n       ...'
            │       │       │   └── assignment_expression [28,8]-[36,9] 'DOMAIN_SEPARATOR = keccak256(\n       ...'
            │       │       │       ├── expression [28,8]-[28,24] 'DOMAIN_SEPARATOR'
            │       │       │       │   └── identifier [28,8]-[28,24] 'DOMAIN_SEPARATOR'
            │       │       │       ├── (anon) = [28,25]-[28,26] '='
            │       │       │       └── expression [28,27]-[36,9] 'keccak256(\n            abi.encode(\n  ...'
            │       │       │           └── call_expression [28,27]-[36,9] 'keccak256(\n            abi.encode(\n  ...'
            │       │       │               ├── expression [28,27]-[28,36] 'keccak256'
            │       │       │               │   └── identifier [28,27]-[28,36] 'keccak256'
            │       │       │               ├── (anon) ( [28,36]-[28,37] '('
            │       │       │               ├── call_argument [29,12]-[35,13] 'abi.encode(\n                keccak256...'
            │       │       │               │   └── expression [29,12]-[35,13] 'abi.encode(\n                keccak256...'
            │       │       │               │       └── call_expression [29,12]-[35,13] 'abi.encode(\n                keccak256...'
            │       │       │               │           ├── expression [29,12]-[29,22] 'abi.encode'
            │       │       │               │           │   └── member_expression [29,12]-[29,22] 'abi.encode'
            │       │       │               │           │       ├── identifier [29,12]-[29,15] 'abi'
            │       │       │               │           │       ├── (anon) . [29,15]-[29,16] '.'
            │       │       │               │           │       └── identifier [29,16]-[29,22] 'encode'
            │       │       │               │           ├── (anon) ( [29,22]-[29,23] '('
            │       │       │               │           ├── call_argument [30,16]-[30,111] 'keccak256('EIP712Domain(string name,s...'
            │       │       │               │           │   └── expression [30,16]-[30,111] 'keccak256('EIP712Domain(string name,s...'
            │       │       │               │           │       └── call_expression [30,16]-[30,111] 'keccak256('EIP712Domain(string name,s...'
            │       │       │               │           │           ├── expression [30,16]-[30,25] 'keccak256'
            │       │       │               │           │           │   └── identifier [30,16]-[30,25] 'keccak256'
            │       │       │               │           │           ├── (anon) ( [30,25]-[30,26] '('
            │       │       │               │           │           ├── call_argument [30,26]-[30,110] ''EIP712Domain(string name,string vers...'
            │       │       │               │           │           │   └── expression [30,26]-[30,110] ''EIP712Domain(string name,string vers...'
            │       │       │               │           │           │       └── string_literal [30,26]-[30,110] ''EIP712Domain(string name,string vers...'
            │       │       │               │           │           │           └── string [30,26]-[30,110] ''EIP712Domain(string name,string vers...'
            │       │       │               │           │           │               ├── (anon) ' [30,26]-[30,27] '''
            │       │       │               │           │           │               └── (anon) ' [30,109]-[30,110] '''
            │       │       │               │           │           └── (anon) ) [30,110]-[30,111] ')'
            │       │       │               │           ├── (anon) , [30,111]-[30,112] ','
            │       │       │               │           ├── call_argument [31,16]-[31,38] 'keccak256(bytes(name))'
            │       │       │               │           │   └── expression [31,16]-[31,38] 'keccak256(bytes(name))'
            │       │       │               │           │       └── call_expression [31,16]-[31,38] 'keccak256(bytes(name))'
            │       │       │               │           │           ├── expression [31,16]-[31,25] 'keccak256'
            │       │       │               │           │           │   └── identifier [31,16]-[31,25] 'keccak256'
            │       │       │               │           │           ├── (anon) ( [31,25]-[31,26] '('
            │       │       │               │           │           ├── call_argument [31,26]-[31,37] 'bytes(name)'
            │       │       │               │           │           │   └── expression [31,26]-[31,37] 'bytes(name)'
            │       │       │               │           │           │       └── type_cast_expression [31,26]-[31,37] 'bytes(name)'
            │       │       │               │           │           │           ├── primitive_type [31,26]-[31,31] 'bytes'
            │       │       │               │           │           │           │   └── (anon) bytes [31,26]-[31,31] 'bytes'
            │       │       │               │           │           │           ├── (anon) ( [31,31]-[31,32] '('
            │       │       │               │           │           │           ├── call_argument [31,32]-[31,36] 'name'
            │       │       │               │           │           │           │   └── expression [31,32]-[31,36] 'name'
            │       │       │               │           │           │           │       └── identifier [31,32]-[31,36] 'name'
            │       │       │               │           │           │           └── (anon) ) [31,36]-[31,37] ')'
            │       │       │               │           │           └── (anon) ) [31,37]-[31,38] ')'
            │       │       │               │           ├── (anon) , [31,38]-[31,39] ','
            │       │       │               │           ├── call_argument [32,16]-[32,37] 'keccak256(bytes('1'))'
            │       │       │               │           │   └── expression [32,16]-[32,37] 'keccak256(bytes('1'))'
            │       │       │               │           │       └── call_expression [32,16]-[32,37] 'keccak256(bytes('1'))'
            │       │       │               │           │           ├── expression [32,16]-[32,25] 'keccak256'
            │       │       │               │           │           │   └── identifier [32,16]-[32,25] 'keccak256'
            │       │       │               │           │           ├── (anon) ( [32,25]-[32,26] '('
            │       │       │               │           │           ├── call_argument [32,26]-[32,36] 'bytes('1')'
            │       │       │               │           │           │   └── expression [32,26]-[32,36] 'bytes('1')'
            │       │       │               │           │           │       └── type_cast_expression [32,26]-[32,36] 'bytes('1')'
            │       │       │               │           │           │           ├── primitive_type [32,26]-[32,31] 'bytes'
            │       │       │               │           │           │           │   └── (anon) bytes [32,26]-[32,31] 'bytes'
            │       │       │               │           │           │           ├── (anon) ( [32,31]-[32,32] '('
            │       │       │               │           │           │           ├── call_argument [32,32]-[32,35] ''1''
            │       │       │               │           │           │           │   └── expression [32,32]-[32,35] ''1''
            │       │       │               │           │           │           │       └── string_literal [32,32]-[32,35] ''1''
            │       │       │               │           │           │           │           └── string [32,32]-[32,35] ''1''
            │       │       │               │           │           │           │               ├── (anon) ' [32,32]-[32,33] '''
            │       │       │               │           │           │           │               └── (anon) ' [32,34]-[32,35] '''
            │       │       │               │           │           │           └── (anon) ) [32,35]-[32,36] ')'
            │       │       │               │           │           └── (anon) ) [32,36]-[32,37] ')'
            │       │       │               │           ├── (anon) , [32,37]-[32,38] ','
            │       │       │               │           ├── call_argument [33,16]-[33,23] 'chainId'
            │       │       │               │           │   └── expression [33,16]-[33,23] 'chainId'
            │       │       │               │           │       └── identifier [33,16]-[33,23] 'chainId'
            │       │       │               │           ├── (anon) , [33,23]-[33,24] ','
            │       │       │               │           ├── call_argument [34,16]-[34,29] 'address(this)'
            │       │       │               │           │   └── expression [34,16]-[34,29] 'address(this)'
            │       │       │               │           │       └── type_cast_expression [34,16]-[34,29] 'address(this)'
            │       │       │               │           │           ├── primitive_type [34,16]-[34,23] 'address'
            │       │       │               │           │           │   └── (anon) address [34,16]-[34,23] 'address'
            │       │       │               │           │           ├── (anon) ( [34,23]-[34,24] '('
            │       │       │               │           │           ├── call_argument [34,24]-[34,28] 'this'
            │       │       │               │           │           │   └── expression [34,24]-[34,28] 'this'
            │       │       │               │           │           │       └── identifier [34,24]-[34,28] 'this'
            │       │       │               │           │           └── (anon) ) [34,28]-[34,29] ')'
            │       │       │               │           └── (anon) ) [35,12]-[35,13] ')'
            │       │       │               └── (anon) ) [36,8]-[36,9] ')'
            │       │       └── (anon) ; [36,9]-[36,10] ';'
            │       └── (anon) } [37,4]-[37,5] '}'
            ├── function_definition [39,4]-[43,5] 'function _mint(address to, uint value...'
            │   ├── (anon) function [39,4]-[39,12] 'function'
            │   ├── identifier [39,13]-[39,18] '_mint'
            │   ├── (anon) ( [39,18]-[39,19] '('
            │   ├── parameter [39,19]-[39,29] 'address to'
            │   │   ├── type_name [39,19]-[39,26] 'address'
            │   │   │   └── primitive_type [39,19]-[39,26] 'address'
            │   │   │       └── (anon) address [39,19]-[39,26] 'address'
            │   │   └── identifier [39,27]-[39,29] 'to'
            │   ├── (anon) , [39,29]-[39,30] ','
            │   ├── parameter [39,31]-[39,41] 'uint value'
            │   │   ├── type_name [39,31]-[39,35] 'uint'
            │   │   │   └── primitive_type [39,31]-[39,35] 'uint'
            │   │   │       └── (anon) uint [39,31]-[39,35] 'uint'
            │   │   └── identifier [39,36]-[39,41] 'value'
            │   ├── (anon) ) [39,41]-[39,42] ')'
            │   ├── visibility [39,43]-[39,51] 'internal'
            │   │   └── (anon) internal [39,43]-[39,51] 'internal'
            │   └── function_body [39,52]-[43,5] '{\n        totalSupply = totalSupply.a...'
            │       ├── (anon) { [39,52]-[39,53] '{'
            │       ├── statement [40,8]-[40,45] 'totalSupply = totalSupply.add(value);'
            │       │   └── expression_statement [40,8]-[40,45] 'totalSupply = totalSupply.add(value);'
            │       │       ├── expression [40,8]-[40,44] 'totalSupply = totalSupply.add(value)'
            │       │       │   └── assignment_expression [40,8]-[40,44] 'totalSupply = totalSupply.add(value)'
            │       │       │       ├── expression [40,8]-[40,19] 'totalSupply'
            │       │       │       │   └── identifier [40,8]-[40,19] 'totalSupply'
            │       │       │       ├── (anon) = [40,20]-[40,21] '='
            │       │       │       └── expression [40,22]-[40,44] 'totalSupply.add(value)'
            │       │       │           └── call_expression [40,22]-[40,44] 'totalSupply.add(value)'
            │       │       │               ├── expression [40,22]-[40,37] 'totalSupply.add'
            │       │       │               │   └── member_expression [40,22]-[40,37] 'totalSupply.add'
            │       │       │               │       ├── identifier [40,22]-[40,33] 'totalSupply'
            │       │       │               │       ├── (anon) . [40,33]-[40,34] '.'
            │       │       │               │       └── identifier [40,34]-[40,37] 'add'
            │       │       │               ├── (anon) ( [40,37]-[40,38] '('
            │       │       │               ├── call_argument [40,38]-[40,43] 'value'
            │       │       │               │   └── expression [40,38]-[40,43] 'value'
            │       │       │               │       └── identifier [40,38]-[40,43] 'value'
            │       │       │               └── (anon) ) [40,43]-[40,44] ')'
            │       │       └── (anon) ; [40,44]-[40,45] ';'
            │       ├── statement [41,8]-[41,49] 'balanceOf[to] = balanceOf[to].add(val...'
            │       │   └── expression_statement [41,8]-[41,49] 'balanceOf[to] = balanceOf[to].add(val...'
            │       │       ├── expression [41,8]-[41,48] 'balanceOf[to] = balanceOf[to].add(value)'
            │       │       │   └── assignment_expression [41,8]-[41,48] 'balanceOf[to] = balanceOf[to].add(value)'
            │       │       │       ├── expression [41,8]-[41,21] 'balanceOf[to]'
            │       │       │       │   └── array_access [41,8]-[41,21] 'balanceOf[to]'
            │       │       │       │       ├── expression [41,8]-[41,17] 'balanceOf'
            │       │       │       │       │   └── identifier [41,8]-[41,17] 'balanceOf'
            │       │       │       │       ├── (anon) [ [41,17]-[41,18] '['
            │       │       │       │       ├── expression [41,18]-[41,20] 'to'
            │       │       │       │       │   └── identifier [41,18]-[41,20] 'to'
            │       │       │       │       └── (anon) ] [41,20]-[41,21] ']'
            │       │       │       ├── (anon) = [41,22]-[41,23] '='
            │       │       │       └── expression [41,24]-[41,48] 'balanceOf[to].add(value)'
            │       │       │           └── call_expression [41,24]-[41,48] 'balanceOf[to].add(value)'
            │       │       │               ├── expression [41,24]-[41,41] 'balanceOf[to].add'
            │       │       │               │   └── member_expression [41,24]-[41,41] 'balanceOf[to].add'
            │       │       │               │       ├── expression [41,24]-[41,37] 'balanceOf[to]'
            │       │       │               │       │   └── array_access [41,24]-[41,37] 'balanceOf[to]'
            │       │       │               │       │       ├── expression [41,24]-[41,33] 'balanceOf'
            │       │       │               │       │       │   └── identifier [41,24]-[41,33] 'balanceOf'
            │       │       │               │       │       ├── (anon) [ [41,33]-[41,34] '['
            │       │       │               │       │       ├── expression [41,34]-[41,36] 'to'
            │       │       │               │       │       │   └── identifier [41,34]-[41,36] 'to'
            │       │       │               │       │       └── (anon) ] [41,36]-[41,37] ']'
            │       │       │               │       ├── (anon) . [41,37]-[41,38] '.'
            │       │       │               │       └── identifier [41,38]-[41,41] 'add'
            │       │       │               ├── (anon) ( [41,41]-[41,42] '('
            │       │       │               ├── call_argument [41,42]-[41,47] 'value'
            │       │       │               │   └── expression [41,42]-[41,47] 'value'
            │       │       │               │       └── identifier [41,42]-[41,47] 'value'
            │       │       │               └── (anon) ) [41,47]-[41,48] ')'
            │       │       └── (anon) ; [41,48]-[41,49] ';'
            │       ├── statement [42,8]-[42,45] 'emit Transfer(address(0), to, value);'
            │       │   └── emit_statement [42,8]-[42,45] 'emit Transfer(address(0), to, value);'
            │       │       ├── (anon) emit [42,8]-[42,12] 'emit'
            │       │       ├── expression [42,13]-[42,21] 'Transfer'
            │       │       │   └── identifier [42,13]-[42,21] 'Transfer'
            │       │       ├── (anon) ( [42,21]-[42,22] '('
            │       │       ├── call_argument [42,22]-[42,32] 'address(0)'
            │       │       │   └── expression [42,22]-[42,32] 'address(0)'
            │       │       │       └── type_cast_expression [42,22]-[42,32] 'address(0)'
            │       │       │           ├── primitive_type [42,22]-[42,29] 'address'
            │       │       │           │   └── (anon) address [42,22]-[42,29] 'address'
            │       │       │           ├── (anon) ( [42,29]-[42,30] '('
            │       │       │           ├── call_argument [42,30]-[42,31] '0'
            │       │       │           │   └── expression [42,30]-[42,31] '0'
            │       │       │           │       └── number_literal [42,30]-[42,31] '0'
            │       │       │           └── (anon) ) [42,31]-[42,32] ')'
            │       │       ├── (anon) , [42,32]-[42,33] ','
            │       │       ├── call_argument [42,34]-[42,36] 'to'
            │       │       │   └── expression [42,34]-[42,36] 'to'
            │       │       │       └── identifier [42,34]-[42,36] 'to'
            │       │       ├── (anon) , [42,36]-[42,37] ','
            │       │       ├── call_argument [42,38]-[42,43] 'value'
            │       │       │   └── expression [42,38]-[42,43] 'value'
            │       │       │       └── identifier [42,38]-[42,43] 'value'
            │       │       ├── (anon) ) [42,43]-[42,44] ')'
            │       │       └── (anon) ; [42,44]-[42,45] ';'
            │       └── (anon) } [43,4]-[43,5] '}'
            ├── function_definition [45,4]-[49,5] 'function _burn(address from, uint val...'
            │   ├── (anon) function [45,4]-[45,12] 'function'
            │   ├── identifier [45,13]-[45,18] '_burn'
            │   ├── (anon) ( [45,18]-[45,19] '('
            │   ├── parameter [45,19]-[45,31] 'address from'
            │   │   ├── type_name [45,19]-[45,26] 'address'
            │   │   │   └── primitive_type [45,19]-[45,26] 'address'
            │   │   │       └── (anon) address [45,19]-[45,26] 'address'
            │   │   └── identifier [45,27]-[45,31] 'from'
            │   ├── (anon) , [45,31]-[45,32] ','
            │   ├── parameter [45,33]-[45,43] 'uint value'
            │   │   ├── type_name [45,33]-[45,37] 'uint'
            │   │   │   └── primitive_type [45,33]-[45,37] 'uint'
            │   │   │       └── (anon) uint [45,33]-[45,37] 'uint'
            │   │   └── identifier [45,38]-[45,43] 'value'
            │   ├── (anon) ) [45,43]-[45,44] ')'
            │   ├── visibility [45,45]-[45,53] 'internal'
            │   │   └── (anon) internal [45,45]-[45,53] 'internal'
            │   └── function_body [45,54]-[49,5] '{\n        balanceOf[from] = balanceOf...'
            │       ├── (anon) { [45,54]-[45,55] '{'
            │       ├── statement [46,8]-[46,53] 'balanceOf[from] = balanceOf[from].sub...'
            │       │   └── expression_statement [46,8]-[46,53] 'balanceOf[from] = balanceOf[from].sub...'
            │       │       ├── expression [46,8]-[46,52] 'balanceOf[from] = balanceOf[from].sub...'
            │       │       │   └── assignment_expression [46,8]-[46,52] 'balanceOf[from] = balanceOf[from].sub...'
            │       │       │       ├── expression [46,8]-[46,23] 'balanceOf[from]'
            │       │       │       │   └── array_access [46,8]-[46,23] 'balanceOf[from]'
            │       │       │       │       ├── expression [46,8]-[46,17] 'balanceOf'
            │       │       │       │       │   └── identifier [46,8]-[46,17] 'balanceOf'
            │       │       │       │       ├── (anon) [ [46,17]-[46,18] '['
            │       │       │       │       ├── expression [46,18]-[46,22] 'from'
            │       │       │       │       │   └── identifier [46,18]-[46,22] 'from'
            │       │       │       │       └── (anon) ] [46,22]-[46,23] ']'
            │       │       │       ├── (anon) = [46,24]-[46,25] '='
            │       │       │       └── expression [46,26]-[46,52] 'balanceOf[from].sub(value)'
            │       │       │           └── call_expression [46,26]-[46,52] 'balanceOf[from].sub(value)'
            │       │       │               ├── expression [46,26]-[46,45] 'balanceOf[from].sub'
            │       │       │               │   └── member_expression [46,26]-[46,45] 'balanceOf[from].sub'
            │       │       │               │       ├── expression [46,26]-[46,41] 'balanceOf[from]'
            │       │       │               │       │   └── array_access [46,26]-[46,41] 'balanceOf[from]'
            │       │       │               │       │       ├── expression [46,26]-[46,35] 'balanceOf'
            │       │       │               │       │       │   └── identifier [46,26]-[46,35] 'balanceOf'
            │       │       │               │       │       ├── (anon) [ [46,35]-[46,36] '['
            │       │       │               │       │       ├── expression [46,36]-[46,40] 'from'
            │       │       │               │       │       │   └── identifier [46,36]-[46,40] 'from'
            │       │       │               │       │       └── (anon) ] [46,40]-[46,41] ']'
            │       │       │               │       ├── (anon) . [46,41]-[46,42] '.'
            │       │       │               │       └── identifier [46,42]-[46,45] 'sub'
            │       │       │               ├── (anon) ( [46,45]-[46,46] '('
            │       │       │               ├── call_argument [46,46]-[46,51] 'value'
            │       │       │               │   └── expression [46,46]-[46,51] 'value'
            │       │       │               │       └── identifier [46,46]-[46,51] 'value'
            │       │       │               └── (anon) ) [46,51]-[46,52] ')'
            │       │       └── (anon) ; [46,52]-[46,53] ';'
            │       ├── statement [47,8]-[47,45] 'totalSupply = totalSupply.sub(value);'
            │       │   └── expression_statement [47,8]-[47,45] 'totalSupply = totalSupply.sub(value);'
            │       │       ├── expression [47,8]-[47,44] 'totalSupply = totalSupply.sub(value)'
            │       │       │   └── assignment_expression [47,8]-[47,44] 'totalSupply = totalSupply.sub(value)'
            │       │       │       ├── expression [47,8]-[47,19] 'totalSupply'
            │       │       │       │   └── identifier [47,8]-[47,19] 'totalSupply'
            │       │       │       ├── (anon) = [47,20]-[47,21] '='
            │       │       │       └── expression [47,22]-[47,44] 'totalSupply.sub(value)'
            │       │       │           └── call_expression [47,22]-[47,44] 'totalSupply.sub(value)'
            │       │       │               ├── expression [47,22]-[47,37] 'totalSupply.sub'
            │       │       │               │   └── member_expression [47,22]-[47,37] 'totalSupply.sub'
            │       │       │               │       ├── identifier [47,22]-[47,33] 'totalSupply'
            │       │       │               │       ├── (anon) . [47,33]-[47,34] '.'
            │       │       │               │       └── identifier [47,34]-[47,37] 'sub'
            │       │       │               ├── (anon) ( [47,37]-[47,38] '('
            │       │       │               ├── call_argument [47,38]-[47,43] 'value'
            │       │       │               │   └── expression [47,38]-[47,43] 'value'
            │       │       │               │       └── identifier [47,38]-[47,43] 'value'
            │       │       │               └── (anon) ) [47,43]-[47,44] ')'
            │       │       └── (anon) ; [47,44]-[47,45] ';'
            │       ├── statement [48,8]-[48,47] 'emit Transfer(from, address(0), value);'
            │       │   └── emit_statement [48,8]-[48,47] 'emit Transfer(from, address(0), value);'
            │       │       ├── (anon) emit [48,8]-[48,12] 'emit'
            │       │       ├── expression [48,13]-[48,21] 'Transfer'
            │       │       │   └── identifier [48,13]-[48,21] 'Transfer'
            │       │       ├── (anon) ( [48,21]-[48,22] '('
            │       │       ├── call_argument [48,22]-[48,26] 'from'
            │       │       │   └── expression [48,22]-[48,26] 'from'
            │       │       │       └── identifier [48,22]-[48,26] 'from'
            │       │       ├── (anon) , [48,26]-[48,27] ','
            │       │       ├── call_argument [48,28]-[48,38] 'address(0)'
            │       │       │   └── expression [48,28]-[48,38] 'address(0)'
            │       │       │       └── type_cast_expression [48,28]-[48,38] 'address(0)'
            │       │       │           ├── primitive_type [48,28]-[48,35] 'address'
            │       │       │           │   └── (anon) address [48,28]-[48,35] 'address'
            │       │       │           ├── (anon) ( [48,35]-[48,36] '('
            │       │       │           ├── call_argument [48,36]-[48,37] '0'
            │       │       │           │   └── expression [48,36]-[48,37] '0'
            │       │       │           │       └── number_literal [48,36]-[48,37] '0'
            │       │       │           └── (anon) ) [48,37]-[48,38] ')'
            │       │       ├── (anon) , [48,38]-[48,39] ','
            │       │       ├── call_argument [48,40]-[48,45] 'value'
            │       │       │   └── expression [48,40]-[48,45] 'value'
            │       │       │       └── identifier [48,40]-[48,45] 'value'
            │       │       ├── (anon) ) [48,45]-[48,46] ')'
            │       │       └── (anon) ; [48,46]-[48,47] ';'
            │       └── (anon) } [49,4]-[49,5] '}'
            ├── function_definition [51,4]-[54,5] 'function _approve(address owner, addr...'
            │   ├── (anon) function [51,4]-[51,12] 'function'
            │   ├── identifier [51,13]-[51,21] '_approve'
            │   ├── (anon) ( [51,21]-[51,22] '('
            │   ├── parameter [51,22]-[51,35] 'address owner'
            │   │   ├── type_name [51,22]-[51,29] 'address'
            │   │   │   └── primitive_type [51,22]-[51,29] 'address'
            │   │   │       └── (anon) address [51,22]-[51,29] 'address'
            │   │   └── identifier [51,30]-[51,35] 'owner'
            │   ├── (anon) , [51,35]-[51,36] ','
            │   ├── parameter [51,37]-[51,52] 'address spender'
            │   │   ├── type_name [51,37]-[51,44] 'address'
            │   │   │   └── primitive_type [51,37]-[51,44] 'address'
            │   │   │       └── (anon) address [51,37]-[51,44] 'address'
            │   │   └── identifier [51,45]-[51,52] 'spender'
            │   ├── (anon) , [51,52]-[51,53] ','
            │   ├── parameter [51,54]-[51,64] 'uint value'
            │   │   ├── type_name [51,54]-[51,58] 'uint'
            │   │   │   └── primitive_type [51,54]-[51,58] 'uint'
            │   │   │       └── (anon) uint [51,54]-[51,58] 'uint'
            │   │   └── identifier [51,59]-[51,64] 'value'
            │   ├── (anon) ) [51,64]-[51,65] ')'
            │   ├── visibility [51,66]-[51,73] 'private'
            │   │   └── (anon) private [51,66]-[51,73] 'private'
            │   └── function_body [51,74]-[54,5] '{\n        allowance[owner][spender] =...'
            │       ├── (anon) { [51,74]-[51,75] '{'
            │       ├── statement [52,8]-[52,42] 'allowance[owner][spender] = value;'
            │       │   └── expression_statement [52,8]-[52,42] 'allowance[owner][spender] = value;'
            │       │       ├── expression [52,8]-[52,41] 'allowance[owner][spender] = value'
            │       │       │   └── assignment_expression [52,8]-[52,41] 'allowance[owner][spender] = value'
            │       │       │       ├── expression [52,8]-[52,33] 'allowance[owner][spender]'
            │       │       │       │   └── array_access [52,8]-[52,33] 'allowance[owner][spender]'
            │       │       │       │       ├── expression [52,8]-[52,24] 'allowance[owner]'
            │       │       │       │       │   └── array_access [52,8]-[52,24] 'allowance[owner]'
            │       │       │       │       │       ├── expression [52,8]-[52,17] 'allowance'
            │       │       │       │       │       │   └── identifier [52,8]-[52,17] 'allowance'
            │       │       │       │       │       ├── (anon) [ [52,17]-[52,18] '['
            │       │       │       │       │       ├── expression [52,18]-[52,23] 'owner'
            │       │       │       │       │       │   └── identifier [52,18]-[52,23] 'owner'
            │       │       │       │       │       └── (anon) ] [52,23]-[52,24] ']'
            │       │       │       │       ├── (anon) [ [52,24]-[52,25] '['
            │       │       │       │       ├── expression [52,25]-[52,32] 'spender'
            │       │       │       │       │   └── identifier [52,25]-[52,32] 'spender'
            │       │       │       │       └── (anon) ] [52,32]-[52,33] ']'
            │       │       │       ├── (anon) = [52,34]-[52,35] '='
            │       │       │       └── expression [52,36]-[52,41] 'value'
            │       │       │           └── identifier [52,36]-[52,41] 'value'
            │       │       └── (anon) ; [52,41]-[52,42] ';'
            │       ├── statement [53,8]-[53,45] 'emit Approval(owner, spender, value);'
            │       │   └── emit_statement [53,8]-[53,45] 'emit Approval(owner, spender, value);'
            │       │       ├── (anon) emit [53,8]-[53,12] 'emit'
            │       │       ├── expression [53,13]-[53,21] 'Approval'
            │       │       │   └── identifier [53,13]-[53,21] 'Approval'
            │       │       ├── (anon) ( [53,21]-[53,22] '('
            │       │       ├── call_argument [53,22]-[53,27] 'owner'
            │       │       │   └── expression [53,22]-[53,27] 'owner'
            │       │       │       └── identifier [53,22]-[53,27] 'owner'
            │       │       ├── (anon) , [53,27]-[53,28] ','
            │       │       ├── call_argument [53,29]-[53,36] 'spender'
            │       │       │   └── expression [53,29]-[53,36] 'spender'
            │       │       │       └── identifier [53,29]-[53,36] 'spender'
            │       │       ├── (anon) , [53,36]-[53,37] ','
            │       │       ├── call_argument [53,38]-[53,43] 'value'
            │       │       │   └── expression [53,38]-[53,43] 'value'
            │       │       │       └── identifier [53,38]-[53,43] 'value'
            │       │       ├── (anon) ) [53,43]-[53,44] ')'
            │       │       └── (anon) ; [53,44]-[53,45] ';'
            │       └── (anon) } [54,4]-[54,5] '}'
            ├── function_definition [56,4]-[60,5] 'function _transfer(address from, addr...'
            │   ├── (anon) function [56,4]-[56,12] 'function'
            │   ├── identifier [56,13]-[56,22] '_transfer'
            │   ├── (anon) ( [56,22]-[56,23] '('
            │   ├── parameter [56,23]-[56,35] 'address from'
            │   │   ├── type_name [56,23]-[56,30] 'address'
            │   │   │   └── primitive_type [56,23]-[56,30] 'address'
            │   │   │       └── (anon) address [56,23]-[56,30] 'address'
            │   │   └── identifier [56,31]-[56,35] 'from'
            │   ├── (anon) , [56,35]-[56,36] ','
            │   ├── parameter [56,37]-[56,47] 'address to'
            │   │   ├── type_name [56,37]-[56,44] 'address'
            │   │   │   └── primitive_type [56,37]-[56,44] 'address'
            │   │   │       └── (anon) address [56,37]-[56,44] 'address'
            │   │   └── identifier [56,45]-[56,47] 'to'
            │   ├── (anon) , [56,47]-[56,48] ','
            │   ├── parameter [56,49]-[56,59] 'uint value'
            │   │   ├── type_name [56,49]-[56,53] 'uint'
            │   │   │   └── primitive_type [56,49]-[56,53] 'uint'
            │   │   │       └── (anon) uint [56,49]-[56,53] 'uint'
            │   │   └── identifier [56,54]-[56,59] 'value'
            │   ├── (anon) ) [56,59]-[56,60] ')'
            │   ├── visibility [56,61]-[56,68] 'private'
            │   │   └── (anon) private [56,61]-[56,68] 'private'
            │   └── function_body [56,69]-[60,5] '{\n        balanceOf[from] = balanceOf...'
            │       ├── (anon) { [56,69]-[56,70] '{'
            │       ├── statement [57,8]-[57,53] 'balanceOf[from] = balanceOf[from].sub...'
            │       │   └── expression_statement [57,8]-[57,53] 'balanceOf[from] = balanceOf[from].sub...'
            │       │       ├── expression [57,8]-[57,52] 'balanceOf[from] = balanceOf[from].sub...'
            │       │       │   └── assignment_expression [57,8]-[57,52] 'balanceOf[from] = balanceOf[from].sub...'
            │       │       │       ├── expression [57,8]-[57,23] 'balanceOf[from]'
            │       │       │       │   └── array_access [57,8]-[57,23] 'balanceOf[from]'
            │       │       │       │       ├── expression [57,8]-[57,17] 'balanceOf'
            │       │       │       │       │   └── identifier [57,8]-[57,17] 'balanceOf'
            │       │       │       │       ├── (anon) [ [57,17]-[57,18] '['
            │       │       │       │       ├── expression [57,18]-[57,22] 'from'
            │       │       │       │       │   └── identifier [57,18]-[57,22] 'from'
            │       │       │       │       └── (anon) ] [57,22]-[57,23] ']'
            │       │       │       ├── (anon) = [57,24]-[57,25] '='
            │       │       │       └── expression [57,26]-[57,52] 'balanceOf[from].sub(value)'
            │       │       │           └── call_expression [57,26]-[57,52] 'balanceOf[from].sub(value)'
            │       │       │               ├── expression [57,26]-[57,45] 'balanceOf[from].sub'
            │       │       │               │   └── member_expression [57,26]-[57,45] 'balanceOf[from].sub'
            │       │       │               │       ├── expression [57,26]-[57,41] 'balanceOf[from]'
            │       │       │               │       │   └── array_access [57,26]-[57,41] 'balanceOf[from]'
            │       │       │               │       │       ├── expression [57,26]-[57,35] 'balanceOf'
            │       │       │               │       │       │   └── identifier [57,26]-[57,35] 'balanceOf'
            │       │       │               │       │       ├── (anon) [ [57,35]-[57,36] '['
            │       │       │               │       │       ├── expression [57,36]-[57,40] 'from'
            │       │       │               │       │       │   └── identifier [57,36]-[57,40] 'from'
            │       │       │               │       │       └── (anon) ] [57,40]-[57,41] ']'
            │       │       │               │       ├── (anon) . [57,41]-[57,42] '.'
            │       │       │               │       └── identifier [57,42]-[57,45] 'sub'
            │       │       │               ├── (anon) ( [57,45]-[57,46] '('
            │       │       │               ├── call_argument [57,46]-[57,51] 'value'
            │       │       │               │   └── expression [57,46]-[57,51] 'value'
            │       │       │               │       └── identifier [57,46]-[57,51] 'value'
            │       │       │               └── (anon) ) [57,51]-[57,52] ')'
            │       │       └── (anon) ; [57,52]-[57,53] ';'
            │       ├── statement [58,8]-[58,49] 'balanceOf[to] = balanceOf[to].add(val...'
            │       │   └── expression_statement [58,8]-[58,49] 'balanceOf[to] = balanceOf[to].add(val...'
            │       │       ├── expression [58,8]-[58,48] 'balanceOf[to] = balanceOf[to].add(value)'
            │       │       │   └── assignment_expression [58,8]-[58,48] 'balanceOf[to] = balanceOf[to].add(value)'
            │       │       │       ├── expression [58,8]-[58,21] 'balanceOf[to]'
            │       │       │       │   └── array_access [58,8]-[58,21] 'balanceOf[to]'
            │       │       │       │       ├── expression [58,8]-[58,17] 'balanceOf'
            │       │       │       │       │   └── identifier [58,8]-[58,17] 'balanceOf'
            │       │       │       │       ├── (anon) [ [58,17]-[58,18] '['
            │       │       │       │       ├── expression [58,18]-[58,20] 'to'
            │       │       │       │       │   └── identifier [58,18]-[58,20] 'to'
            │       │       │       │       └── (anon) ] [58,20]-[58,21] ']'
            │       │       │       ├── (anon) = [58,22]-[58,23] '='
            │       │       │       └── expression [58,24]-[58,48] 'balanceOf[to].add(value)'
            │       │       │           └── call_expression [58,24]-[58,48] 'balanceOf[to].add(value)'
            │       │       │               ├── expression [58,24]-[58,41] 'balanceOf[to].add'
            │       │       │               │   └── member_expression [58,24]-[58,41] 'balanceOf[to].add'
            │       │       │               │       ├── expression [58,24]-[58,37] 'balanceOf[to]'
            │       │       │               │       │   └── array_access [58,24]-[58,37] 'balanceOf[to]'
            │       │       │               │       │       ├── expression [58,24]-[58,33] 'balanceOf'
            │       │       │               │       │       │   └── identifier [58,24]-[58,33] 'balanceOf'
            │       │       │               │       │       ├── (anon) [ [58,33]-[58,34] '['
            │       │       │               │       │       ├── expression [58,34]-[58,36] 'to'
            │       │       │               │       │       │   └── identifier [58,34]-[58,36] 'to'
            │       │       │               │       │       └── (anon) ] [58,36]-[58,37] ']'
            │       │       │               │       ├── (anon) . [58,37]-[58,38] '.'
            │       │       │               │       └── identifier [58,38]-[58,41] 'add'
            │       │       │               ├── (anon) ( [58,41]-[58,42] '('
            │       │       │               ├── call_argument [58,42]-[58,47] 'value'
            │       │       │               │   └── expression [58,42]-[58,47] 'value'
            │       │       │               │       └── identifier [58,42]-[58,47] 'value'
            │       │       │               └── (anon) ) [58,47]-[58,48] ')'
            │       │       └── (anon) ; [58,48]-[58,49] ';'
            │       ├── statement [59,8]-[59,39] 'emit Transfer(from, to, value);'
            │       │   └── emit_statement [59,8]-[59,39] 'emit Transfer(from, to, value);'
            │       │       ├── (anon) emit [59,8]-[59,12] 'emit'
            │       │       ├── expression [59,13]-[59,21] 'Transfer'
            │       │       │   └── identifier [59,13]-[59,21] 'Transfer'
            │       │       ├── (anon) ( [59,21]-[59,22] '('
            │       │       ├── call_argument [59,22]-[59,26] 'from'
            │       │       │   └── expression [59,22]-[59,26] 'from'
            │       │       │       └── identifier [59,22]-[59,26] 'from'
            │       │       ├── (anon) , [59,26]-[59,27] ','
            │       │       ├── call_argument [59,28]-[59,30] 'to'
            │       │       │   └── expression [59,28]-[59,30] 'to'
            │       │       │       └── identifier [59,28]-[59,30] 'to'
            │       │       ├── (anon) , [59,30]-[59,31] ','
            │       │       ├── call_argument [59,32]-[59,37] 'value'
            │       │       │   └── expression [59,32]-[59,37] 'value'
            │       │       │       └── identifier [59,32]-[59,37] 'value'
            │       │       ├── (anon) ) [59,37]-[59,38] ')'
            │       │       └── (anon) ; [59,38]-[59,39] ';'
            │       └── (anon) } [60,4]-[60,5] '}'
            ├── function_definition [62,4]-[65,5] 'function approve(address spender, uin...'
            │   ├── (anon) function [62,4]-[62,12] 'function'
            │   ├── identifier [62,13]-[62,20] 'approve'
            │   ├── (anon) ( [62,20]-[62,21] '('
            │   ├── parameter [62,21]-[62,36] 'address spender'
            │   │   ├── type_name [62,21]-[62,28] 'address'
            │   │   │   └── primitive_type [62,21]-[62,28] 'address'
            │   │   │       └── (anon) address [62,21]-[62,28] 'address'
            │   │   └── identifier [62,29]-[62,36] 'spender'
            │   ├── (anon) , [62,36]-[62,37] ','
            │   ├── parameter [62,38]-[62,48] 'uint value'
            │   │   ├── type_name [62,38]-[62,42] 'uint'
            │   │   │   └── primitive_type [62,38]-[62,42] 'uint'
            │   │   │       └── (anon) uint [62,38]-[62,42] 'uint'
            │   │   └── identifier [62,43]-[62,48] 'value'
            │   ├── (anon) ) [62,48]-[62,49] ')'
            │   ├── visibility [62,50]-[62,58] 'external'
            │   │   └── (anon) external [62,50]-[62,58] 'external'
            │   ├── return_type_definition [62,59]-[62,73] 'returns (bool)'
            │   │   ├── (anon) returns [62,59]-[62,66] 'returns'
            │   │   ├── (anon) ( [62,67]-[62,68] '('
            │   │   ├── parameter [62,68]-[62,72] 'bool'
            │   │   │   └── type_name [62,68]-[62,72] 'bool'
            │   │   │       └── primitive_type [62,68]-[62,72] 'bool'
            │   │   │           └── (anon) bool [62,68]-[62,72] 'bool'
            │   │   └── (anon) ) [62,72]-[62,73] ')'
            │   └── function_body [62,74]-[65,5] '{\n        _approve(msg.sender, spende...'
            │       ├── (anon) { [62,74]-[62,75] '{'
            │       ├── statement [63,8]-[63,45] '_approve(msg.sender, spender, value);'
            │       │   └── expression_statement [63,8]-[63,45] '_approve(msg.sender, spender, value);'
            │       │       ├── expression [63,8]-[63,44] '_approve(msg.sender, spender, value)'
            │       │       │   └── call_expression [63,8]-[63,44] '_approve(msg.sender, spender, value)'
            │       │       │       ├── expression [63,8]-[63,16] '_approve'
            │       │       │       │   └── identifier [63,8]-[63,16] '_approve'
            │       │       │       ├── (anon) ( [63,16]-[63,17] '('
            │       │       │       ├── call_argument [63,17]-[63,27] 'msg.sender'
            │       │       │       │   └── expression [63,17]-[63,27] 'msg.sender'
            │       │       │       │       └── member_expression [63,17]-[63,27] 'msg.sender'
            │       │       │       │           ├── identifier [63,17]-[63,20] 'msg'
            │       │       │       │           ├── (anon) . [63,20]-[63,21] '.'
            │       │       │       │           └── identifier [63,21]-[63,27] 'sender'
            │       │       │       ├── (anon) , [63,27]-[63,28] ','
            │       │       │       ├── call_argument [63,29]-[63,36] 'spender'
            │       │       │       │   └── expression [63,29]-[63,36] 'spender'
            │       │       │       │       └── identifier [63,29]-[63,36] 'spender'
            │       │       │       ├── (anon) , [63,36]-[63,37] ','
            │       │       │       ├── call_argument [63,38]-[63,43] 'value'
            │       │       │       │   └── expression [63,38]-[63,43] 'value'
            │       │       │       │       └── identifier [63,38]-[63,43] 'value'
            │       │       │       └── (anon) ) [63,43]-[63,44] ')'
            │       │       └── (anon) ; [63,44]-[63,45] ';'
            │       ├── statement [64,8]-[64,20] 'return true;'
            │       │   └── return_statement [64,8]-[64,20] 'return true;'
            │       │       ├── (anon) return [64,8]-[64,14] 'return'
            │       │       ├── expression [64,15]-[64,19] 'true'
            │       │       │   └── boolean_literal [64,15]-[64,19] 'true'
            │       │       │       └── true [64,15]-[64,19] 'true'
            │       │       │           └── (anon) true [64,15]-[64,19] 'true'
            │       │       └── (anon) ; [64,19]-[64,20] ';'
            │       └── (anon) } [65,4]-[65,5] '}'
            ├── function_definition [67,4]-[70,5] 'function transfer(address to, uint va...'
            │   ├── (anon) function [67,4]-[67,12] 'function'
            │   ├── identifier [67,13]-[67,21] 'transfer'
            │   ├── (anon) ( [67,21]-[67,22] '('
            │   ├── parameter [67,22]-[67,32] 'address to'
            │   │   ├── type_name [67,22]-[67,29] 'address'
            │   │   │   └── primitive_type [67,22]-[67,29] 'address'
            │   │   │       └── (anon) address [67,22]-[67,29] 'address'
            │   │   └── identifier [67,30]-[67,32] 'to'
            │   ├── (anon) , [67,32]-[67,33] ','
            │   ├── parameter [67,34]-[67,44] 'uint value'
            │   │   ├── type_name [67,34]-[67,38] 'uint'
            │   │   │   └── primitive_type [67,34]-[67,38] 'uint'
            │   │   │       └── (anon) uint [67,34]-[67,38] 'uint'
            │   │   └── identifier [67,39]-[67,44] 'value'
            │   ├── (anon) ) [67,44]-[67,45] ')'
            │   ├── visibility [67,46]-[67,54] 'external'
            │   │   └── (anon) external [67,46]-[67,54] 'external'
            │   ├── return_type_definition [67,55]-[67,69] 'returns (bool)'
            │   │   ├── (anon) returns [67,55]-[67,62] 'returns'
            │   │   ├── (anon) ( [67,63]-[67,64] '('
            │   │   ├── parameter [67,64]-[67,68] 'bool'
            │   │   │   └── type_name [67,64]-[67,68] 'bool'
            │   │   │       └── primitive_type [67,64]-[67,68] 'bool'
            │   │   │           └── (anon) bool [67,64]-[67,68] 'bool'
            │   │   └── (anon) ) [67,68]-[67,69] ')'
            │   └── function_body [67,70]-[70,5] '{\n        _transfer(msg.sender, to, v...'
            │       ├── (anon) { [67,70]-[67,71] '{'
            │       ├── statement [68,8]-[68,41] '_transfer(msg.sender, to, value);'
            │       │   └── expression_statement [68,8]-[68,41] '_transfer(msg.sender, to, value);'
            │       │       ├── expression [68,8]-[68,40] '_transfer(msg.sender, to, value)'
            │       │       │   └── call_expression [68,8]-[68,40] '_transfer(msg.sender, to, value)'
            │       │       │       ├── expression [68,8]-[68,17] '_transfer'
            │       │       │       │   └── identifier [68,8]-[68,17] '_transfer'
            │       │       │       ├── (anon) ( [68,17]-[68,18] '('
            │       │       │       ├── call_argument [68,18]-[68,28] 'msg.sender'
            │       │       │       │   └── expression [68,18]-[68,28] 'msg.sender'
            │       │       │       │       └── member_expression [68,18]-[68,28] 'msg.sender'
            │       │       │       │           ├── identifier [68,18]-[68,21] 'msg'
            │       │       │       │           ├── (anon) . [68,21]-[68,22] '.'
            │       │       │       │           └── identifier [68,22]-[68,28] 'sender'
            │       │       │       ├── (anon) , [68,28]-[68,29] ','
            │       │       │       ├── call_argument [68,30]-[68,32] 'to'
            │       │       │       │   └── expression [68,30]-[68,32] 'to'
            │       │       │       │       └── identifier [68,30]-[68,32] 'to'
            │       │       │       ├── (anon) , [68,32]-[68,33] ','
            │       │       │       ├── call_argument [68,34]-[68,39] 'value'
            │       │       │       │   └── expression [68,34]-[68,39] 'value'
            │       │       │       │       └── identifier [68,34]-[68,39] 'value'
            │       │       │       └── (anon) ) [68,39]-[68,40] ')'
            │       │       └── (anon) ; [68,40]-[68,41] ';'
            │       ├── statement [69,8]-[69,20] 'return true;'
            │       │   └── return_statement [69,8]-[69,20] 'return true;'
            │       │       ├── (anon) return [69,8]-[69,14] 'return'
            │       │       ├── expression [69,15]-[69,19] 'true'
            │       │       │   └── boolean_literal [69,15]-[69,19] 'true'
            │       │       │       └── true [69,15]-[69,19] 'true'
            │       │       │           └── (anon) true [69,15]-[69,19] 'true'
            │       │       └── (anon) ; [69,19]-[69,20] ';'
            │       └── (anon) } [70,4]-[70,5] '}'
            ├── function_definition [72,4]-[78,5] 'function transferFrom(address from, a...'
            │   ├── (anon) function [72,4]-[72,12] 'function'
            │   ├── identifier [72,13]-[72,25] 'transferFrom'
            │   ├── (anon) ( [72,25]-[72,26] '('
            │   ├── parameter [72,26]-[72,38] 'address from'
            │   │   ├── type_name [72,26]-[72,33] 'address'
            │   │   │   └── primitive_type [72,26]-[72,33] 'address'
            │   │   │       └── (anon) address [72,26]-[72,33] 'address'
            │   │   └── identifier [72,34]-[72,38] 'from'
            │   ├── (anon) , [72,38]-[72,39] ','
            │   ├── parameter [72,40]-[72,50] 'address to'
            │   │   ├── type_name [72,40]-[72,47] 'address'
            │   │   │   └── primitive_type [72,40]-[72,47] 'address'
            │   │   │       └── (anon) address [72,40]-[72,47] 'address'
            │   │   └── identifier [72,48]-[72,50] 'to'
            │   ├── (anon) , [72,50]-[72,51] ','
            │   ├── parameter [72,52]-[72,62] 'uint value'
            │   │   ├── type_name [72,52]-[72,56] 'uint'
            │   │   │   └── primitive_type [72,52]-[72,56] 'uint'
            │   │   │       └── (anon) uint [72,52]-[72,56] 'uint'
            │   │   └── identifier [72,57]-[72,62] 'value'
            │   ├── (anon) ) [72,62]-[72,63] ')'
            │   ├── visibility [72,64]-[72,72] 'external'
            │   │   └── (anon) external [72,64]-[72,72] 'external'
            │   ├── return_type_definition [72,73]-[72,87] 'returns (bool)'
            │   │   ├── (anon) returns [72,73]-[72,80] 'returns'
            │   │   ├── (anon) ( [72,81]-[72,82] '('
            │   │   ├── parameter [72,82]-[72,86] 'bool'
            │   │   │   └── type_name [72,82]-[72,86] 'bool'
            │   │   │       └── primitive_type [72,82]-[72,86] 'bool'
            │   │   │           └── (anon) bool [72,82]-[72,86] 'bool'
            │   │   └── (anon) ) [72,86]-[72,87] ')'
            │   └── function_body [72,88]-[78,5] '{\n        if (allowance[from][msg.sen...'
            │       ├── (anon) { [72,88]-[72,89] '{'
            │       ├── statement [73,8]-[75,9] 'if (allowance[from][msg.sender] != ui...'
            │       │   └── if_statement [73,8]-[75,9] 'if (allowance[from][msg.sender] != ui...'
            │       │       ├── (anon) if [73,8]-[73,10] 'if'
            │       │       ├── (anon) ( [73,11]-[73,12] '('
            │       │       ├── expression [73,12]-[73,51] 'allowance[from][msg.sender] != uint(-1)'
            │       │       │   └── binary_expression [73,12]-[73,51] 'allowance[from][msg.sender] != uint(-1)'
            │       │       │       ├── expression [73,12]-[73,39] 'allowance[from][msg.sender]'
            │       │       │       │   └── array_access [73,12]-[73,39] 'allowance[from][msg.sender]'
            │       │       │       │       ├── expression [73,12]-[73,27] 'allowance[from]'
            │       │       │       │       │   └── array_access [73,12]-[73,27] 'allowance[from]'
            │       │       │       │       │       ├── expression [73,12]-[73,21] 'allowance'
            │       │       │       │       │       │   └── identifier [73,12]-[73,21] 'allowance'
            │       │       │       │       │       ├── (anon) [ [73,21]-[73,22] '['
            │       │       │       │       │       ├── expression [73,22]-[73,26] 'from'
            │       │       │       │       │       │   └── identifier [73,22]-[73,26] 'from'
            │       │       │       │       │       └── (anon) ] [73,26]-[73,27] ']'
            │       │       │       │       ├── (anon) [ [73,27]-[73,28] '['
            │       │       │       │       ├── expression [73,28]-[73,38] 'msg.sender'
            │       │       │       │       │   └── member_expression [73,28]-[73,38] 'msg.sender'
            │       │       │       │       │       ├── identifier [73,28]-[73,31] 'msg'
            │       │       │       │       │       ├── (anon) . [73,31]-[73,32] '.'
            │       │       │       │       │       └── identifier [73,32]-[73,38] 'sender'
            │       │       │       │       └── (anon) ] [73,38]-[73,39] ']'
            │       │       │       ├── (anon) != [73,40]-[73,42] '!='
            │       │       │       └── expression [73,43]-[73,51] 'uint(-1)'
            │       │       │           └── type_cast_expression [73,43]-[73,51] 'uint(-1)'
            │       │       │               ├── primitive_type [73,43]-[73,47] 'uint'
            │       │       │               │   └── (anon) uint [73,43]-[73,47] 'uint'
            │       │       │               ├── (anon) ( [73,47]-[73,48] '('
            │       │       │               ├── call_argument [73,48]-[73,50] '-1'
            │       │       │               │   └── expression [73,48]-[73,50] '-1'
            │       │       │               │       └── unary_expression [73,48]-[73,50] '-1'
            │       │       │               │           ├── (anon) - [73,48]-[73,49] '-'
            │       │       │               │           └── expression [73,49]-[73,50] '1'
            │       │       │               │               └── number_literal [73,49]-[73,50] '1'
            │       │       │               └── (anon) ) [73,50]-[73,51] ')'
            │       │       ├── (anon) ) [73,51]-[73,52] ')'
            │       │       └── statement [73,53]-[75,9] '{\n            allowance[from][msg.sen...'
            │       │           └── block_statement [73,53]-[75,9] '{\n            allowance[from][msg.sen...'
            │       │               ├── (anon) { [73,53]-[73,54] '{'
            │       │               ├── statement [74,12]-[74,81] 'allowance[from][msg.sender] = allowan...'
            │       │               │   └── expression_statement [74,12]-[74,81] 'allowance[from][msg.sender] = allowan...'
            │       │               │       ├── expression [74,12]-[74,80] 'allowance[from][msg.sender] = allowan...'
            │       │               │       │   └── assignment_expression [74,12]-[74,80] 'allowance[from][msg.sender] = allowan...'
            │       │               │       │       ├── expression [74,12]-[74,39] 'allowance[from][msg.sender]'
            │       │               │       │       │   └── array_access [74,12]-[74,39] 'allowance[from][msg.sender]'
            │       │               │       │       │       ├── expression [74,12]-[74,27] 'allowance[from]'
            │       │               │       │       │       │   └── array_access [74,12]-[74,27] 'allowance[from]'
            │       │               │       │       │       │       ├── expression [74,12]-[74,21] 'allowance'
            │       │               │       │       │       │       │   └── identifier [74,12]-[74,21] 'allowance'
            │       │               │       │       │       │       ├── (anon) [ [74,21]-[74,22] '['
            │       │               │       │       │       │       ├── expression [74,22]-[74,26] 'from'
            │       │               │       │       │       │       │   └── identifier [74,22]-[74,26] 'from'
            │       │               │       │       │       │       └── (anon) ] [74,26]-[74,27] ']'
            │       │               │       │       │       ├── (anon) [ [74,27]-[74,28] '['
            │       │               │       │       │       ├── expression [74,28]-[74,38] 'msg.sender'
            │       │               │       │       │       │   └── member_expression [74,28]-[74,38] 'msg.sender'
            │       │               │       │       │       │       ├── identifier [74,28]-[74,31] 'msg'
            │       │               │       │       │       │       ├── (anon) . [74,31]-[74,32] '.'
            │       │               │       │       │       │       └── identifier [74,32]-[74,38] 'sender'
            │       │               │       │       │       └── (anon) ] [74,38]-[74,39] ']'
            │       │               │       │       ├── (anon) = [74,40]-[74,41] '='
            │       │               │       │       └── expression [74,42]-[74,80] 'allowance[from][msg.sender].sub(value)'
            │       │               │       │           └── call_expression [74,42]-[74,80] 'allowance[from][msg.sender].sub(value)'
            │       │               │       │               ├── expression [74,42]-[74,73] 'allowance[from][msg.sender].sub'
            │       │               │       │               │   └── member_expression [74,42]-[74,73] 'allowance[from][msg.sender].sub'
            │       │               │       │               │       ├── expression [74,42]-[74,69] 'allowance[from][msg.sender]'
            │       │               │       │               │       │   └── array_access [74,42]-[74,69] 'allowance[from][msg.sender]'
            │       │               │       │               │       │       ├── expression [74,42]-[74,57] 'allowance[from]'
            │       │               │       │               │       │       │   └── array_access [74,42]-[74,57] 'allowance[from]'
            │       │               │       │               │       │       │       ├── expression [74,42]-[74,51] 'allowance'
            │       │               │       │               │       │       │       │   └── identifier [74,42]-[74,51] 'allowance'
            │       │               │       │               │       │       │       ├── (anon) [ [74,51]-[74,52] '['
            │       │               │       │               │       │       │       ├── expression [74,52]-[74,56] 'from'
            │       │               │       │               │       │       │       │   └── identifier [74,52]-[74,56] 'from'
            │       │               │       │               │       │       │       └── (anon) ] [74,56]-[74,57] ']'
            │       │               │       │               │       │       ├── (anon) [ [74,57]-[74,58] '['
            │       │               │       │               │       │       ├── expression [74,58]-[74,68] 'msg.sender'
            │       │               │       │               │       │       │   └── member_expression [74,58]-[74,68] 'msg.sender'
            │       │               │       │               │       │       │       ├── identifier [74,58]-[74,61] 'msg'
            │       │               │       │               │       │       │       ├── (anon) . [74,61]-[74,62] '.'
            │       │               │       │               │       │       │       └── identifier [74,62]-[74,68] 'sender'
            │       │               │       │               │       │       └── (anon) ] [74,68]-[74,69] ']'
            │       │               │       │               │       ├── (anon) . [74,69]-[74,70] '.'
            │       │               │       │               │       └── identifier [74,70]-[74,73] 'sub'
            │       │               │       │               ├── (anon) ( [74,73]-[74,74] '('
            │       │               │       │               ├── call_argument [74,74]-[74,79] 'value'
            │       │               │       │               │   └── expression [74,74]-[74,79] 'value'
            │       │               │       │               │       └── identifier [74,74]-[74,79] 'value'
            │       │               │       │               └── (anon) ) [74,79]-[74,80] ')'
            │       │               │       └── (anon) ; [74,80]-[74,81] ';'
            │       │               └── (anon) } [75,8]-[75,9] '}'
            │       ├── statement [76,8]-[76,35] '_transfer(from, to, value);'
            │       │   └── expression_statement [76,8]-[76,35] '_transfer(from, to, value);'
            │       │       ├── expression [76,8]-[76,34] '_transfer(from, to, value)'
            │       │       │   └── call_expression [76,8]-[76,34] '_transfer(from, to, value)'
            │       │       │       ├── expression [76,8]-[76,17] '_transfer'
            │       │       │       │   └── identifier [76,8]-[76,17] '_transfer'
            │       │       │       ├── (anon) ( [76,17]-[76,18] '('
            │       │       │       ├── call_argument [76,18]-[76,22] 'from'
            │       │       │       │   └── expression [76,18]-[76,22] 'from'
            │       │       │       │       └── identifier [76,18]-[76,22] 'from'
            │       │       │       ├── (anon) , [76,22]-[76,23] ','
            │       │       │       ├── call_argument [76,24]-[76,26] 'to'
            │       │       │       │   └── expression [76,24]-[76,26] 'to'
            │       │       │       │       └── identifier [76,24]-[76,26] 'to'
            │       │       │       ├── (anon) , [76,26]-[76,27] ','
            │       │       │       ├── call_argument [76,28]-[76,33] 'value'
            │       │       │       │   └── expression [76,28]-[76,33] 'value'
            │       │       │       │       └── identifier [76,28]-[76,33] 'value'
            │       │       │       └── (anon) ) [76,33]-[76,34] ')'
            │       │       └── (anon) ; [76,34]-[76,35] ';'
            │       ├── statement [77,8]-[77,20] 'return true;'
            │       │   └── return_statement [77,8]-[77,20] 'return true;'
            │       │       ├── (anon) return [77,8]-[77,14] 'return'
            │       │       ├── expression [77,15]-[77,19] 'true'
            │       │       │   └── boolean_literal [77,15]-[77,19] 'true'
            │       │       │       └── true [77,15]-[77,19] 'true'
            │       │       │           └── (anon) true [77,15]-[77,19] 'true'
            │       │       └── (anon) ; [77,19]-[77,20] ';'
            │       └── (anon) } [78,4]-[78,5] '}'
            ├── function_definition [80,4]-[92,5] 'function permit(address owner, addres...'
            │   ├── (anon) function [80,4]-[80,12] 'function'
            │   ├── identifier [80,13]-[80,19] 'permit'
            │   ├── (anon) ( [80,19]-[80,20] '('
            │   ├── parameter [80,20]-[80,33] 'address owner'
            │   │   ├── type_name [80,20]-[80,27] 'address'
            │   │   │   └── primitive_type [80,20]-[80,27] 'address'
            │   │   │       └── (anon) address [80,20]-[80,27] 'address'
            │   │   └── identifier [80,28]-[80,33] 'owner'
            │   ├── (anon) , [80,33]-[80,34] ','
            │   ├── parameter [80,35]-[80,50] 'address spender'
            │   │   ├── type_name [80,35]-[80,42] 'address'
            │   │   │   └── primitive_type [80,35]-[80,42] 'address'
            │   │   │       └── (anon) address [80,35]-[80,42] 'address'
            │   │   └── identifier [80,43]-[80,50] 'spender'
            │   ├── (anon) , [80,50]-[80,51] ','
            │   ├── parameter [80,52]-[80,62] 'uint value'
            │   │   ├── type_name [80,52]-[80,56] 'uint'
            │   │   │   └── primitive_type [80,52]-[80,56] 'uint'
            │   │   │       └── (anon) uint [80,52]-[80,56] 'uint'
            │   │   └── identifier [80,57]-[80,62] 'value'
            │   ├── (anon) , [80,62]-[80,63] ','
            │   ├── parameter [80,64]-[80,77] 'uint deadline'
            │   │   ├── type_name [80,64]-[80,68] 'uint'
            │   │   │   └── primitive_type [80,64]-[80,68] 'uint'
            │   │   │       └── (anon) uint [80,64]-[80,68] 'uint'
            │   │   └── identifier [80,69]-[80,77] 'deadline'
            │   ├── (anon) , [80,77]-[80,78] ','
            │   ├── parameter [80,79]-[80,86] 'uint8 v'
            │   │   ├── type_name [80,79]-[80,84] 'uint8'
            │   │   │   └── primitive_type [80,79]-[80,84] 'uint8'
            │   │   │       └── (anon) uint8 [80,79]-[80,84] 'uint8'
            │   │   └── identifier [80,85]-[80,86] 'v'
            │   ├── (anon) , [80,86]-[80,87] ','
            │   ├── parameter [80,88]-[80,97] 'bytes32 r'
            │   │   ├── type_name [80,88]-[80,95] 'bytes32'
            │   │   │   └── primitive_type [80,88]-[80,95] 'bytes32'
            │   │   │       └── (anon) bytes32 [80,88]-[80,95] 'bytes32'
            │   │   └── identifier [80,96]-[80,97] 'r'
            │   ├── (anon) , [80,97]-[80,98] ','
            │   ├── parameter [80,99]-[80,108] 'bytes32 s'
            │   │   ├── type_name [80,99]-[80,106] 'bytes32'
            │   │   │   └── primitive_type [80,99]-[80,106] 'bytes32'
            │   │   │       └── (anon) bytes32 [80,99]-[80,106] 'bytes32'
            │   │   └── identifier [80,107]-[80,108] 's'
            │   ├── (anon) ) [80,108]-[80,109] ')'
            │   ├── visibility [80,110]-[80,118] 'external'
            │   │   └── (anon) external [80,110]-[80,118] 'external'
            │   └── function_body [80,119]-[92,5] '{\n        require(deadline >= block.t...'
            │       ├── (anon) { [80,119]-[80,120] '{'
            │       ├── statement [81,8]-[81,67] 'require(deadline >= block.timestamp, ...'
            │       │   └── expression_statement [81,8]-[81,67] 'require(deadline >= block.timestamp, ...'
            │       │       ├── expression [81,8]-[81,66] 'require(deadline >= block.timestamp, ...'
            │       │       │   └── call_expression [81,8]-[81,66] 'require(deadline >= block.timestamp, ...'
            │       │       │       ├── expression [81,8]-[81,15] 'require'
            │       │       │       │   └── identifier [81,8]-[81,15] 'require'
            │       │       │       ├── (anon) ( [81,15]-[81,16] '('
            │       │       │       ├── call_argument [81,16]-[81,43] 'deadline >= block.timestamp'
            │       │       │       │   └── expression [81,16]-[81,43] 'deadline >= block.timestamp'
            │       │       │       │       └── binary_expression [81,16]-[81,43] 'deadline >= block.timestamp'
            │       │       │       │           ├── expression [81,16]-[81,24] 'deadline'
            │       │       │       │           │   └── identifier [81,16]-[81,24] 'deadline'
            │       │       │       │           ├── (anon) >= [81,25]-[81,27] '>='
            │       │       │       │           └── expression [81,28]-[81,43] 'block.timestamp'
            │       │       │       │               └── member_expression [81,28]-[81,43] 'block.timestamp'
            │       │       │       │                   ├── identifier [81,28]-[81,33] 'block'
            │       │       │       │                   ├── (anon) . [81,33]-[81,34] '.'
            │       │       │       │                   └── identifier [81,34]-[81,43] 'timestamp'
            │       │       │       ├── (anon) , [81,43]-[81,44] ','
            │       │       │       ├── call_argument [81,45]-[81,65] ''UniswapV2: EXPIRED''
            │       │       │       │   └── expression [81,45]-[81,65] ''UniswapV2: EXPIRED''
            │       │       │       │       └── string_literal [81,45]-[81,65] ''UniswapV2: EXPIRED''
            │       │       │       │           └── string [81,45]-[81,65] ''UniswapV2: EXPIRED''
            │       │       │       │               ├── (anon) ' [81,45]-[81,46] '''
            │       │       │       │               └── (anon) ' [81,64]-[81,65] '''
            │       │       │       └── (anon) ) [81,65]-[81,66] ')'
            │       │       └── (anon) ; [81,66]-[81,67] ';'
            │       ├── statement [82,8]-[88,10] 'bytes32 digest = keccak256(\n         ...'
            │       │   └── variable_declaration_statement [82,8]-[88,10] 'bytes32 digest = keccak256(\n         ...'
            │       │       ├── variable_declaration [82,8]-[82,22] 'bytes32 digest'
            │       │       │   ├── type_name [82,8]-[82,15] 'bytes32'
            │       │       │   │   └── primitive_type [82,8]-[82,15] 'bytes32'
            │       │       │   │       └── (anon) bytes32 [82,8]-[82,15] 'bytes32'
            │       │       │   └── identifier [82,16]-[82,22] 'digest'
            │       │       ├── (anon) = [82,23]-[82,24] '='
            │       │       ├── expression [82,25]-[88,9] 'keccak256(\n            abi.encodePack...'
            │       │       │   └── call_expression [82,25]-[88,9] 'keccak256(\n            abi.encodePack...'
            │       │       │       ├── expression [82,25]-[82,34] 'keccak256'
            │       │       │       │   └── identifier [82,25]-[82,34] 'keccak256'
            │       │       │       ├── (anon) ( [82,34]-[82,35] '('
            │       │       │       ├── call_argument [83,12]-[87,13] 'abi.encodePacked(\n                '\x...'
            │       │       │       │   └── expression [83,12]-[87,13] 'abi.encodePacked(\n                '\x...'
            │       │       │       │       └── call_expression [83,12]-[87,13] 'abi.encodePacked(\n                '\x...'
            │       │       │       │           ├── expression [83,12]-[83,28] 'abi.encodePacked'
            │       │       │       │           │   └── member_expression [83,12]-[83,28] 'abi.encodePacked'
            │       │       │       │           │       ├── identifier [83,12]-[83,15] 'abi'
            │       │       │       │           │       ├── (anon) . [83,15]-[83,16] '.'
            │       │       │       │           │       └── identifier [83,16]-[83,28] 'encodePacked'
            │       │       │       │           ├── (anon) ( [83,28]-[83,29] '('
            │       │       │       │           ├── call_argument [84,16]-[84,26] ''\x19\x01''
            │       │       │       │           │   └── expression [84,16]-[84,26] ''\x19\x01''
            │       │       │       │           │       └── string_literal [84,16]-[84,26] ''\x19\x01''
            │       │       │       │           │           └── string [84,16]-[84,26] ''\x19\x01''
            │       │       │       │           │               ├── (anon) ' [84,16]-[84,17] '''
            │       │       │       │           │               └── (anon) ' [84,25]-[84,26] '''
            │       │       │       │           ├── (anon) , [84,26]-[84,27] ','
            │       │       │       │           ├── call_argument [85,16]-[85,32] 'DOMAIN_SEPARATOR'
            │       │       │       │           │   └── expression [85,16]-[85,32] 'DOMAIN_SEPARATOR'
            │       │       │       │           │       └── identifier [85,16]-[85,32] 'DOMAIN_SEPARATOR'
            │       │       │       │           ├── (anon) , [85,32]-[85,33] ','
            │       │       │       │           ├── call_argument [86,16]-[86,104] 'keccak256(abi.encode(PERMIT_TYPEHASH,...'
            │       │       │       │           │   └── expression [86,16]-[86,104] 'keccak256(abi.encode(PERMIT_TYPEHASH,...'
            │       │       │       │           │       └── call_expression [86,16]-[86,104] 'keccak256(abi.encode(PERMIT_TYPEHASH,...'
            │       │       │       │           │           ├── expression [86,16]-[86,25] 'keccak256'
            │       │       │       │           │           │   └── identifier [86,16]-[86,25] 'keccak256'
            │       │       │       │           │           ├── (anon) ( [86,25]-[86,26] '('
            │       │       │       │           │           ├── call_argument [86,26]-[86,103] 'abi.encode(PERMIT_TYPEHASH, owner, sp...'
            │       │       │       │           │           │   └── expression [86,26]-[86,103] 'abi.encode(PERMIT_TYPEHASH, owner, sp...'
            │       │       │       │           │           │       └── call_expression [86,26]-[86,103] 'abi.encode(PERMIT_TYPEHASH, owner, sp...'
            │       │       │       │           │           │           ├── expression [86,26]-[86,36] 'abi.encode'
            │       │       │       │           │           │           │   └── member_expression [86,26]-[86,36] 'abi.encode'
            │       │       │       │           │           │           │       ├── identifier [86,26]-[86,29] 'abi'
            │       │       │       │           │           │           │       ├── (anon) . [86,29]-[86,30] '.'
            │       │       │       │           │           │           │       └── identifier [86,30]-[86,36] 'encode'
            │       │       │       │           │           │           ├── (anon) ( [86,36]-[86,37] '('
            │       │       │       │           │           │           ├── call_argument [86,37]-[86,52] 'PERMIT_TYPEHASH'
            │       │       │       │           │           │           │   └── expression [86,37]-[86,52] 'PERMIT_TYPEHASH'
            │       │       │       │           │           │           │       └── identifier [86,37]-[86,52] 'PERMIT_TYPEHASH'
            │       │       │       │           │           │           ├── (anon) , [86,52]-[86,53] ','
            │       │       │       │           │           │           ├── call_argument [86,54]-[86,59] 'owner'
            │       │       │       │           │           │           │   └── expression [86,54]-[86,59] 'owner'
            │       │       │       │           │           │           │       └── identifier [86,54]-[86,59] 'owner'
            │       │       │       │           │           │           ├── (anon) , [86,59]-[86,60] ','
            │       │       │       │           │           │           ├── call_argument [86,61]-[86,68] 'spender'
            │       │       │       │           │           │           │   └── expression [86,61]-[86,68] 'spender'
            │       │       │       │           │           │           │       └── identifier [86,61]-[86,68] 'spender'
            │       │       │       │           │           │           ├── (anon) , [86,68]-[86,69] ','
            │       │       │       │           │           │           ├── call_argument [86,70]-[86,75] 'value'
            │       │       │       │           │           │           │   └── expression [86,70]-[86,75] 'value'
            │       │       │       │           │           │           │       └── identifier [86,70]-[86,75] 'value'
            │       │       │       │           │           │           ├── (anon) , [86,75]-[86,76] ','
            │       │       │       │           │           │           ├── call_argument [86,77]-[86,92] 'nonces[owner]++'
            │       │       │       │           │           │           │   └── expression [86,77]-[86,92] 'nonces[owner]++'
            │       │       │       │           │           │           │       └── update_expression [86,77]-[86,92] 'nonces[owner]++'
            │       │       │       │           │           │           │           ├── expression [86,77]-[86,90] 'nonces[owner]'
            │       │       │       │           │           │           │           │   └── array_access [86,77]-[86,90] 'nonces[owner]'
            │       │       │       │           │           │           │           │       ├── expression [86,77]-[86,83] 'nonces'
            │       │       │       │           │           │           │           │       │   └── identifier [86,77]-[86,83] 'nonces'
            │       │       │       │           │           │           │           │       ├── (anon) [ [86,83]-[86,84] '['
            │       │       │       │           │           │           │           │       ├── expression [86,84]-[86,89] 'owner'
            │       │       │       │           │           │           │           │       │   └── identifier [86,84]-[86,89] 'owner'
            │       │       │       │           │           │           │           │       └── (anon) ] [86,89]-[86,90] ']'
            │       │       │       │           │           │           │           └── (anon) ++ [86,90]-[86,92] '++'
            │       │       │       │           │           │           ├── (anon) , [86,92]-[86,93] ','
            │       │       │       │           │           │           ├── call_argument [86,94]-[86,102] 'deadline'
            │       │       │       │           │           │           │   └── expression [86,94]-[86,102] 'deadline'
            │       │       │       │           │           │           │       └── identifier [86,94]-[86,102] 'deadline'
            │       │       │       │           │           │           └── (anon) ) [86,102]-[86,103] ')'
            │       │       │       │           │           └── (anon) ) [86,103]-[86,104] ')'
            │       │       │       │           └── (anon) ) [87,12]-[87,13] ')'
            │       │       │       └── (anon) ) [88,8]-[88,9] ')'
            │       │       └── (anon) ; [88,9]-[88,10] ';'
            │       ├── statement [89,8]-[89,62] 'address recoveredAddress = ecrecover(...'
            │       │   └── variable_declaration_statement [89,8]-[89,62] 'address recoveredAddress = ecrecover(...'
            │       │       ├── variable_declaration [89,8]-[89,32] 'address recoveredAddress'
            │       │       │   ├── type_name [89,8]-[89,15] 'address'
            │       │       │   │   └── primitive_type [89,8]-[89,15] 'address'
            │       │       │   │       └── (anon) address [89,8]-[89,15] 'address'
            │       │       │   └── identifier [89,16]-[89,32] 'recoveredAddress'
            │       │       ├── (anon) = [89,33]-[89,34] '='
            │       │       ├── expression [89,35]-[89,61] 'ecrecover(digest, v, r, s)'
            │       │       │   └── call_expression [89,35]-[89,61] 'ecrecover(digest, v, r, s)'
            │       │       │       ├── expression [89,35]-[89,44] 'ecrecover'
            │       │       │       │   └── identifier [89,35]-[89,44] 'ecrecover'
            │       │       │       ├── (anon) ( [89,44]-[89,45] '('
            │       │       │       ├── call_argument [89,45]-[89,51] 'digest'
            │       │       │       │   └── expression [89,45]-[89,51] 'digest'
            │       │       │       │       └── identifier [89,45]-[89,51] 'digest'
            │       │       │       ├── (anon) , [89,51]-[89,52] ','
            │       │       │       ├── call_argument [89,53]-[89,54] 'v'
            │       │       │       │   └── expression [89,53]-[89,54] 'v'
            │       │       │       │       └── identifier [89,53]-[89,54] 'v'
            │       │       │       ├── (anon) , [89,54]-[89,55] ','
            │       │       │       ├── call_argument [89,56]-[89,57] 'r'
            │       │       │       │   └── expression [89,56]-[89,57] 'r'
            │       │       │       │       └── identifier [89,56]-[89,57] 'r'
            │       │       │       ├── (anon) , [89,57]-[89,58] ','
            │       │       │       ├── call_argument [89,59]-[89,60] 's'
            │       │       │       │   └── expression [89,59]-[89,60] 's'
            │       │       │       │       └── identifier [89,59]-[89,60] 's'
            │       │       │       └── (anon) ) [89,60]-[89,61] ')'
            │       │       └── (anon) ; [89,61]-[89,62] ';'
            │       ├── statement [90,8]-[90,109] 'require(recoveredAddress != address(0...'
            │       │   └── expression_statement [90,8]-[90,109] 'require(recoveredAddress != address(0...'
            │       │       ├── expression [90,8]-[90,108] 'require(recoveredAddress != address(0...'
            │       │       │   └── call_expression [90,8]-[90,108] 'require(recoveredAddress != address(0...'
            │       │       │       ├── expression [90,8]-[90,15] 'require'
            │       │       │       │   └── identifier [90,8]-[90,15] 'require'
            │       │       │       ├── (anon) ( [90,15]-[90,16] '('
            │       │       │       ├── call_argument [90,16]-[90,75] 'recoveredAddress != address(0) && rec...'
            │       │       │       │   └── expression [90,16]-[90,75] 'recoveredAddress != address(0) && rec...'
            │       │       │       │       └── binary_expression [90,16]-[90,75] 'recoveredAddress != address(0) && rec...'
            │       │       │       │           ├── expression [90,16]-[90,46] 'recoveredAddress != address(0)'
            │       │       │       │           │   └── binary_expression [90,16]-[90,46] 'recoveredAddress != address(0)'
            │       │       │       │           │       ├── expression [90,16]-[90,32] 'recoveredAddress'
            │       │       │       │           │       │   └── identifier [90,16]-[90,32] 'recoveredAddress'
            │       │       │       │           │       ├── (anon) != [90,33]-[90,35] '!='
            │       │       │       │           │       └── expression [90,36]-[90,46] 'address(0)'
            │       │       │       │           │           └── type_cast_expression [90,36]-[90,46] 'address(0)'
            │       │       │       │           │               ├── primitive_type [90,36]-[90,43] 'address'
            │       │       │       │           │               │   └── (anon) address [90,36]-[90,43] 'address'
            │       │       │       │           │               ├── (anon) ( [90,43]-[90,44] '('
            │       │       │       │           │               ├── call_argument [90,44]-[90,45] '0'
            │       │       │       │           │               │   └── expression [90,44]-[90,45] '0'
            │       │       │       │           │               │       └── number_literal [90,44]-[90,45] '0'
            │       │       │       │           │               └── (anon) ) [90,45]-[90,46] ')'
            │       │       │       │           ├── (anon) && [90,47]-[90,49] '&&'
            │       │       │       │           └── expression [90,50]-[90,75] 'recoveredAddress == owner'
            │       │       │       │               └── binary_expression [90,50]-[90,75] 'recoveredAddress == owner'
            │       │       │       │                   ├── expression [90,50]-[90,66] 'recoveredAddress'
            │       │       │       │                   │   └── identifier [90,50]-[90,66] 'recoveredAddress'
            │       │       │       │                   ├── (anon) == [90,67]-[90,69] '=='
            │       │       │       │                   └── expression [90,70]-[90,75] 'owner'
            │       │       │       │                       └── identifier [90,70]-[90,75] 'owner'
            │       │       │       ├── (anon) , [90,75]-[90,76] ','
            │       │       │       ├── call_argument [90,77]-[90,107] ''UniswapV2: INVALID_SIGNATURE''
            │       │       │       │   └── expression [90,77]-[90,107] ''UniswapV2: INVALID_SIGNATURE''
            │       │       │       │       └── string_literal [90,77]-[90,107] ''UniswapV2: INVALID_SIGNATURE''
            │       │       │       │           └── string [90,77]-[90,107] ''UniswapV2: INVALID_SIGNATURE''
            │       │       │       │               ├── (anon) ' [90,77]-[90,78] '''
            │       │       │       │               └── (anon) ' [90,106]-[90,107] '''
            │       │       │       └── (anon) ) [90,107]-[90,108] ')'
            │       │       └── (anon) ; [90,108]-[90,109] ';'
            │       ├── statement [91,8]-[91,40] '_approve(owner, spender, value);'
            │       │   └── expression_statement [91,8]-[91,40] '_approve(owner, spender, value);'
            │       │       ├── expression [91,8]-[91,39] '_approve(owner, spender, value)'
            │       │       │   └── call_expression [91,8]-[91,39] '_approve(owner, spender, value)'
            │       │       │       ├── expression [91,8]-[91,16] '_approve'
            │       │       │       │   └── identifier [91,8]-[91,16] '_approve'
            │       │       │       ├── (anon) ( [91,16]-[91,17] '('
            │       │       │       ├── call_argument [91,17]-[91,22] 'owner'
            │       │       │       │   └── expression [91,17]-[91,22] 'owner'
            │       │       │       │       └── identifier [91,17]-[91,22] 'owner'
            │       │       │       ├── (anon) , [91,22]-[91,23] ','
            │       │       │       ├── call_argument [91,24]-[91,31] 'spender'
            │       │       │       │   └── expression [91,24]-[91,31] 'spender'
            │       │       │       │       └── identifier [91,24]-[91,31] 'spender'
            │       │       │       ├── (anon) , [91,31]-[91,32] ','
            │       │       │       ├── call_argument [91,33]-[91,38] 'value'
            │       │       │       │   └── expression [91,33]-[91,38] 'value'
            │       │       │       │       └── identifier [91,33]-[91,38] 'value'
            │       │       │       └── (anon) ) [91,38]-[91,39] ')'
            │       │       └── (anon) ; [91,39]-[91,40] ';'
            │       └── (anon) } [92,4]-[92,5] '}'
            └── (anon) } [93,0]-[93,1] '}'
