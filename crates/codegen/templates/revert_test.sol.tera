// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import { BaseTest } from "../BaseTest.sol"; // Assuming BaseTest.sol is in a parent 'test' directory
import { {{ contract_name }} } from "../../src/{{ contract_name }}.sol";

/**
 * @title {{ contract_name_pascal_case }}{{ function_info.name | pascal_case }}RevertTest
 * @dev Revert tests for the {{ function_info.name }} function in {{ contract_name }}
 * Generated automatically by sol2test @ {{ timestamp }}
 */
contract {{ contract_name_pascal_case }}{{ function_info.name | pascal_case }}RevertTest is BaseTest {
    {{ contract_name }} internal {{ contract_name | camel_case }};

    function setUp() public virtual override {
        super.setUp();
        // TODO: Deploy the {{ contract_name }} contract and assign to {{ contract_name | camel_case }}
        // Example: {{ contract_name | camel_case }} = new {{ contract_name }}();
    }

    {% for test in revert_tests %}
    /**
     * @dev Tests that {{ function_info.name }} reverts when {{ test.condition_string_description }}
     * Condition: {{ test.condition_string }}
     * Error: {{ test.error_message }}
     */
    function {{ test.test_function_name }}() public {
        // --- Test Setup ---
        // TODO: Set up contract state and parameters to make the condition '{{ test.condition_string }}' false.
        // Example:
        // vm.prank(nonOwnerAddress);
        // uint256 specificAmount = 0; // Value that triggers revert

        // --- Expect Revert ---
        vm.expectRevert(bytes("{{ test.error_message }}"));

        // --- Call Function ---
        // TODO: Call {{ contract_name | camel_case }}.{{ function_info.name }} with appropriate parameters.
        // Example:
        // {{ contract_name | camel_case }}.{{ function_info.name }}(
        {%- for param in function_info.parameters -%}
            {%- if loop.first %} /* {{ param.type }} {{ param.name }} */ {% else %} ,/* {{ param.type }} {{ param.name }} */ {% endif -%}
            // TODO: Provide value for {{ param.name }}
        {%- endfor -%}
        // );
    }
    {% endfor %}
}

