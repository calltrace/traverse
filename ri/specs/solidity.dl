typedef NodeId = string

// Specific AST Nodes
input relation FunctionDefinitionNode(
    id: NodeId,
    name: string,
    visibility: string,
    state_mutability: string
)

input relation ParameterNode(
    id: NodeId,
    name: string,
    param_type: string
)

input relation ReturnStatementNode(
    id: NodeId
)

input relation BinaryExpressionNode(
    id: NodeId,
    operator: string
)

input relation IdentifierNode(
    id: NodeId,
    name: string
)

// Edges
input relation ChildEdge(
    parent: NodeId,
    child: NodeId
)

input relation ExpressionEdge(
    statement: NodeId,
    expression: NodeId
)

input relation OperandEdge(
    expression: NodeId,
    operand: NodeId,
    operand_type: string
)

// Output Relation for Full Tree Dump
output relation DumpTree(phrase: string)

// Rule to dump FunctionDefinitionNode
DumpTree("FunctionDefinitionNode: ID = " ++ id ++ ", Name = " ++ name ++
         ", Visibility = " ++ visibility ++ ", StateMutability = " ++ state_mutability) :-
    FunctionDefinitionNode(id, name, visibility, state_mutability).

// Rule to dump ParameterNode
DumpTree("ParameterNode: ID = " ++ id ++ ", Name = " ++ name ++ ", Type = " ++ param_type) :-
    ParameterNode(id, name, param_type).

// Rule to dump ReturnStatementNode
DumpTree("ReturnStatementNode: ID = " ++ id) :-
    ReturnStatementNode(id).

// Rule to dump BinaryExpressionNode
DumpTree("BinaryExpressionNode: ID = " ++ id ++ ", Operator = " ++ operator) :-
    BinaryExpressionNode(id, operator).

// Rule to dump IdentifierNode
DumpTree("IdentifierNode: ID = " ++ id ++ ", Name = " ++ name) :-
    IdentifierNode(id, name).

// Rule to dump ChildEdge
DumpTree("ChildEdge: Parent = " ++ parent ++ ", Child = " ++ child) :-
    ChildEdge(parent, child).

// Rule to dump ExpressionEdge
DumpTree("ExpressionEdge: Statement = " ++ statement ++ ", Expression = " ++ expression) :-
    ExpressionEdge(statement, expression).

// Rule to dump OperandEdge
DumpTree("OperandEdge: Expression = " ++ expression ++ ", Operand = " ++ operand ++
         ", OperandType = " ++ operand_type) :-
    OperandEdge(expression, operand, operand_type).
